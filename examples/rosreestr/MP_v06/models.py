# THIS FILE IS GENERATED AUTOMATICALLY. DO NOT EDIT
# -*- coding: utf-8 -*-

from __future__ import unicode_literals

import datetime
from django.core import validators
from django.db import models

from .fields import \
        CadastralBlockTypeField, \
        CadastralNumberTypeField, \
        EmailAddressTypeField, \
        LegalPersonINNTypeField, \
        OGRNCompanyTypeField, \
        OKATOTypeField, \
        OKTMOTypeField, \
        PostalCodeRFTypeField, \
        SNILSTypeField, \
        d20_2Field, \
        d38_2Field, \
        dAllDocumentsField, \
        dAllowedUseField, \
        dApartmentTypeField, \
        dApplied_fileField, \
        dCategoriesField, \
        dCityField, \
        dDistrictField, \
        dEncumbrancesField, \
        dForestUseField, \
        dGeopointOpredField, \
        dInhabitedLocalitiesField, \
        dLocationLevel1TypeField, \
        dLocationLevel2TypeField, \
        dLocationLevel3TypeField, \
        dMethodField, \
        dOldNumberField, \
        dRegionsRFField, \
        dSovietVillageField, \
        dStreetsField, \
        dUrbanDistrictField, \
        dUtilizationsField, \
        nn20Field, \
        nonEmptyStringField, \
        p10Field, \
        p20Field, \
        p22Field, \
        p22Min1Field, \
        rus_100Field, \
        s1000Field, \
        s120Field, \
        s2046Field, \
        s2500Field, \
        s255Field, \
        s2Field, \
        s30Field, \
        s4000Field, \
        s45Field, \
        s500Field, \
        sAddressOrLocationField, \
        sCertificate50Field, \
        sGUIDField, \
        sID255Field, \
        sIDREF255Field, \
        sName500PDFField, \
        sNameNew255Field, \
        sNameNew500Field, \
        sNe1000Field, \
        sNe100Field, \
        sNe120Field, \
        sNe1500Field, \
        sNe20Field, \
        sNe255Field, \
        sNe4000Field, \
        sNe45Field, \
        sNe500Field, \
        sNe50Field



# Corresponds to XSD type[s]: tCity
class City(models.Model):
    Name = sNe255Field("Наименование")
    Type = dCityField(
        "Тип\n"
"г - Город\n"
"пгт - Посёлок городского типа\n"
"рп - Рабочий посёлок\n"
"кп - Курортный посёлок\n"
"дп - Дачный посёлок\n"
"с/с - Сельсовет\n"
"с/а - Сельская администрация\n"
"с/о - Сельский округ\n"
"волость - Волость\n"
"п/о - Почтовое отделение\n"
"тер - Территория\n"
"с/п - Сельское поселение\n"
"с/мо - Сельское муниципальное образование\n"
"массив - Массив\n"
"п - Посёлок\n"
"местность - Местность"
    )

    class Meta:
        verbose_name = "Муниципальное образование"


# Corresponds to XSD type[s]: tDistrict
class District(models.Model):
    Name = sNe255Field("Наименование")
    Type = dDistrictField(
        "Тип\n"
"р-н - Район\n"
"у - Улус\n"
"тер - Территория\n"
"АО - Автономный округ\n"
"п - Поселение"
    )

    class Meta:
        verbose_name = "Район"


# Corresponds to XSD type[s]: tLocality
class Locality(models.Model):
    Name = sNe255Field("Наименование")
    Type = dInhabitedLocalitiesField(
        "Тип\n"
"аал - Аал\n"
"аул - Аул\n"
"волость - Волость\n"
"высел - Выселки(ок)\n"
"г - Город\n"
"д - Деревня\n"
"дп - Дачный посёлок\n"
"ж/д_будка - Железнодорожная будка\n"
"ж/д_казарм - Железнодорожная казарма\n"
"ж/д_оп - ж/д остановочный (обгонный) пункт\n"
"ж/д_пост - Железнодорожный пост\n"
"ж/д_рзд - Железнодорожный разъезд\n"
"ж/д_ст - Железнодорожная станция\n"
"заимка - Заимка\n"
"казарма - Казарма\n"
"кп - Курортный посёлок\n"
"м - Местечко\n"
"мкр - Микрорайон\n"
"нп - Населённый пункт\n"
"остров - Остров\n"
"п - Посёлок\n"
"п/р - Планировочный район\n"
"п/ст - Посёлок и(при) станция(и)\n"
"пгт - Посёлок городского типа\n"
"починок - Починок\n"
"п/о - Почтовое отделение\n"
"промзона - Промышленная зона\n"
"рзд - Разъезд\n"
"рп - Рабочий посёлок\n"
"с - Село\n"
"сл - Слобода\n"
"ст - Станция\n"
"ст-ца - Станица\n"
"у - Улус\n"
"х - Хутор\n"
"городок - Городок\n"
"тер - Территория\n"
"ж/д_платф - Железнодорожная платформа\n"
"кв-л - Квартал\n"
"арбан - Арбан\n"
"снт - Садовое некоммерческое товарищество\n"
"лпх - Леспромхоз\n"
"погост - Погост\n"
"кордон - Кордон\n"
"автодорога - Автодорога\n"
"жилрайон - Жилой район\n"
"жилзона - Жилая зона\n"
"массив - Массив"
    )

    class Meta:
        verbose_name = "Населённый пункт"


# Corresponds to XSD type[s]: tSovietVillage
class SovietVillage(models.Model):
    Name = sNe255Field("Наименование")
    Type = dSovietVillageField("Тип\n"
"с/с - Сельсовет")

    class Meta:
        verbose_name = "Сельсовет"


# Corresponds to XSD type[s]: tUrbanDistrict
class UrbanDistrict(models.Model):
    Name = sNe255Field("Наименование")
    Type = dUrbanDistrictField("Тип\n"
"р-н - район")

    class Meta:
        verbose_name = "Городской район"


# Corresponds to XSD type[s]: tAddressInp
class AddressInp(models.Model):
    OKATO = OKATOTypeField("ОКАТО", null=True)
    KLADR = sNe20Field("КЛАДР")
    OKTMO = OKTMOTypeField("ОКТМО", null=True)
    PostalCode = PostalCodeRFTypeField("Почтовый индекс", null=True)
    Region = dRegionsRFField(
        "Код региона\n"
"01 - Республика Адыгея (Адыгея)\n"
"02 - Республика Башкортостан\n"
"03 - Республика Бурятия\n"
"04 - Республика Алтай\n"
"05 - Республика Дагестан\n"
"06 - Республика Ингушетия\n"
"07 - Кабардино-Балкарская Республика\n"
"08 - Республика Калмыкия\n"
"09 - Карачаево-Черкесская Республика\n"
"10 - Республика Карелия\n"
"11 - Республика Коми\n"
"12 - Республика Марий Эл\n"
"13 - Республика Мордовия\n"
"14 - Республика Саха (Якутия)\n"
"15 - Республика Северная Осетия-Алания\n"
"16 - Республика Татарстан (Татарстан)\n"
"17 - Республика Тыва\n"
"18 - Удмуртская Республика\n"
"19 - Республика Хакасия\n"
"20 - Чеченская Республика\n"
"21 - Чувашская Республика-Чувашия\n"
"22 - Алтайский край\n"
"23 - Краснодарский край\n"
"24 - Красноярский край\n"
"25 - Приморский край\n"
"26 - Ставропольский край\n"
"27 - Хабаровский край\n"
"28 - Амурская область\n"
"29 - Архангельская область\n"
"30 - Астраханская область\n"
"31 - Белгородская область\n"
"32 - Брянская область\n"
"33 - Владимирская область\n"
"34 - Волгоградская область\n"
"35 - Вологодская область\n"
"36 - Воронежская область\n"
"37 - Ивановская область\n"
"38 - Иркутская область\n"
"39 - Калининградская область\n"
"40 - Калужская область\n"
"41 - Камчатский край\n"
"42 - Кемеровская область\n"
"43 - Кировская область\n"
"44 - Костромская область\n"
"45 - Курганская область\n"
"46 - Курская область\n"
"47 - Ленинградская область\n"
"48 - Липецкая область\n"
"49 - Магаданская область\n"
"50 - Московская область\n"
"51 - Мурманская область\n"
"52 - Нижегородская область\n"
"53 - Новгородская область\n"
"54 - Новосибирская область\n"
"55 - Омская область\n"
"56 - Оренбургская область\n"
"57 - Орловская область\n"
"58 - Пензенская область\n"
"59 - Пермский край\n"
"60 - Псковская область\n"
"61 - Ростовская область\n"
"62 - Рязанская область\n"
"63 - Самарская область\n"
"64 - Саратовская область\n"
"65 - Сахалинская область\n"
"66 - Свердловская область\n"
"67 - Смоленская область\n"
"68 - Тамбовская область\n"
"69 - Тверская область\n"
"70 - Томская область\n"
"71 - Тульская область\n"
"72 - Тюменская область\n"
"73 - Ульяновская область\n"
"74 - Челябинская область\n"
"75 - Забайкальский край\n"
"76 - Ярославская область\n"
"77 - Москва\n"
"78 - Санкт-Петербург\n"
"79 - Еврейская автономная область\n"
"83 - Ненецкий автономный округ\n"
"86 - Ханты-Мансийский автономный округ - Югра\n"
"87 - Чукотский автономный округ\n"
"89 - Ямало-Ненецкий автономный округ\n"
"91 - Республика Крым\n"
"92 - Севастополь\n"
"98 - Неопределено\n"
"99 - Значение отсутствует"
    )
    District = models.ForeignKey(
        District,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Район"
    )
    City = models.ForeignKey(
        City,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Муниципальное образование"
    )
    UrbanDistrict = models.ForeignKey(
        UrbanDistrict,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Городской район"
    )
    SovietVillage = models.ForeignKey(
        SovietVillage,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сельсовет"
    )
    Locality = models.ForeignKey(
        Locality,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Населённый пункт"
    )

    class Meta:
        verbose_name = "Адрес (описание местоположения) до уровня населённого пункта"
        abstract = True


# Corresponds to XSD type[s]: tApartment
class Apartment(models.Model):
    Type = dApartmentTypeField(
        "Тип\n"
"кв - Квартира\n"
"бокс - Бокс\n"
"к - Комната\n"
"пом - Помещение"
    )
    Value = sNe255Field("Значение")

    class Meta:
        verbose_name = "Квартира"


# Corresponds to XSD type[s]: tLevel1
class Level1(models.Model):
    Type = dLocationLevel1TypeField(
        "Тип\n"
"д - Дом\n"
"ГСК - Гаражно-строительный кооператив\n"
"казарма\n"
"уч - Участок\n"
"вл - Владение\n"
"бокс\n"
"в/ч - военная часть\n"
"сооружение"
    )
    Value = sNe255Field("Значение")

    class Meta:
        verbose_name = "Дом"


# Corresponds to XSD type[s]: tLevel2
class Level2(models.Model):
    Type = dLocationLevel2TypeField(
        "Тип\n"
"корп - Корпус\n"
"д - Дом\n"
"уч - Участок\n"
"вл - Владение\n"
"гараж - Гараж\n"
"бокс\n"
"строение\n"
"сооружение"
    )
    Value = sNe255Field("Значение")

    class Meta:
        verbose_name = "Корпус"


# Corresponds to XSD type[s]: tLevel3
class Level3(models.Model):
    Type = dLocationLevel3TypeField(
        "Тип\n"
"строен - Строение\n"
"корп - Корпус\n"
"блок - Блок\n"
"литера"
    )
    Value = sNe255Field("Значение")

    class Meta:
        verbose_name = "Строение"


# Corresponds to XSD type[s]: tStreet
class Street(models.Model):
    Name = sNe255Field("Наименование")
    Type = dStreetsField(
        "Тип\n"
"аллея - Аллея\n"
"б-р - Бульвар\n"
"въезд - Въезд\n"
"дор - Дорога\n"
"жт - Животноводческая точка\n"
"заезд - Заезд\n"
"кв-л - Квартал\n"
"км - Километр\n"
"кольцо - Кольцо\n"
"линия - Линия\n"
"наб - Набережная\n"
"остров - Остров\n"
"парк - Парк\n"
"пер - Переулок\n"
"переезд - Переезд\n"
"пл - Площадь\n"
"пл-ка - Площадка\n"
"проезд - Проезд\n"
"пр-кт - Проспект\n"
"просек - Просек\n"
"просёлок - Просёлок\n"
"проулок - Проулок\n"
"сад - Сад\n"
"сквер - Сквер\n"
"стр - Строение\n"
"тер - Территория\n"
"тракт - Тракт\n"
"туп - Тупик\n"
"ул - Улица\n"
"уч-к - Участок\n"
"ш - Шоссе\n"
"аал - Аал\n"
"аул - Аул\n"
"высел - Выселки(ок)\n"
"городок - Городок\n"
"д - Деревня\n"
"ж/д_будка - Железнодорожная будка\n"
"ж/д_казарм - Железнодорожная казарма\n"
"ж/д_оп - Ж/д остановочный (обгонный) пункт\n"
"ж/д_пост - Железнодорожный пост\n"
"ж/д_рзд - Железнодорожный разъезд\n"
"ж/д_ст - Железнодорожная станция\n"
"казарма - Казарма\n"
"м - Местечко\n"
"мкр - Микрорайон\n"
"нп - Населённый пункт\n"
"платф - Платформа\n"
"п - Посёлок\n"
"п/о - Почтовое отделение\n"
"п/р - Планировочный район\n"
"п/ст - Посёлок и(при) станция(и)\n"
"полустанок - Полустанок\n"
"починок - Починок\n"
"рзд - Разъезд\n"
"с - Село\n"
"сл - Слобода\n"
"ст - Станция\n"
"х - Хутор\n"
"ж/д_платф - Железнодорожная платформа\n"
"арбан - Арбан\n"
"спуск - Спуск\n"
"канал - Канал\n"
"гск - Гаражно-строительный кооператив\n"
"снт - Садовое некоммерческое товарищество\n"
"лпх - Леспромхоз\n"
"проток - Проток\n"
"коса - Коса\n"
"вал - Вал\n"
"ферма - Ферма\n"
"мост - Мост\n"
"ряды - Ряды\n"
"а/я - Абонентский ящик\n"
"берег - Берег\n"
"просека - Просека\n"
"протока - Протока\n"
"бугор - Бугор\n"
"зона - Зона\n"
"днп - Дачное некоммерческое партнёрство\n"
"н/п - Некоммерческое партнёрство\n"
"ф/х - Фермерское хозяйство\n"
"местность - Местность\n"
"балка - Балка\n"
"бухта - Бухта\n"
"причал - Причал\n"
"мыс - Мыс\n"
"маяк - Маяк\n"
"горка - Горка\n"
"тоннель - Тоннель"
    )

    class Meta:
        verbose_name = "Улица"


# Corresponds to XSD type[s]: tAddressInpFull
class AddressInpFull(AddressInp):
    Street = models.ForeignKey(
        Street,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Улица"
    )
    Level1 = models.ForeignKey(
        Level1,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Дом"
    )
    Level2 = models.ForeignKey(
        Level2,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Корпус"
    )
    Level3 = models.ForeignKey(
        Level3,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Строение"
    )
    Apartment = models.ForeignKey(
        Apartment,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Квартира"
    )
    Other = s2500Field("Иное описание местоположения", null=True)

    class Meta:
        verbose_name = "Адрес (описание местоположения)"
        abstract = True


# Corresponds to XSD type[s]: tAppliedFile
class AppliedFile(models.Model):
    Kind = dApplied_fileField(
        "Вид файла по справочнику видов приложенных файлов\n"
"01 - Образ документа\n"
"02 - Электронный документ (должен быть представлен одним файлом)"
    )
    Name = sNe500Field("Относительный путь к файлу\\Имя файла")

    class Meta:
        verbose_name = "Приложенный файл"


# Corresponds to XSD type[s]: tAppliedFilePDF
class AppliedFilePDF(models.Model):
    Kind = models.CharField(
        "Вид файла по справочнику видов приложенных файлов",
        choices=[("01", "01")],
        max_length=2
    )
    Name = sName500PDFField(
        "Относительный путь к файлу с изображением\\Имя файла с изображением"
    )

    class Meta:
        verbose_name = "Приложенный файл в формате PDF"


# Corresponds to XSD type[s]: tArea
class Area(models.Model):
    Area = p20Field("Значение площади")
    Unit = models.CharField(
        "Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    Inaccuracy = d20_2Field("Погрешность определения", null=True)

    class Meta:
        verbose_name = "Площадь с округлением до 1 кв. м и (при необходимости) погрешность определения площади"


# Corresponds to XSD type[s]: tAreaContour
class AreaContour(models.Model):
    Area = d20_2Field("Значение площади")
    Unit = models.CharField(
        "Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    Inaccuracy = d20_2Field("Погрешность определения площади", null=True)

    class Meta:
        verbose_name = "Площадь и погрешность определения площади с округлением до 0,01 кв. м"


# Corresponds to XSD type[s]: tAreaNew
class AreaNew(models.Model):
    Area = p20Field("Значение площади")
    Unit = models.CharField(
        "Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    Inaccuracy = d20_2Field("Погрешность определения площади")

    class Meta:
        verbose_name = "Новая (уточненная) площадь с округлением до 1 кв. м и погрешность определения площади"


# Corresponds to XSD type[s]: tBorder
class Border(models.Model):
    Spatial = p22Min1Field("Порядковый номер элемента контура")
    Point1 = p22Min1Field("Порядковый номер точки1 в элементе")
    Point2 = p22Min1Field("Порядковый номер точки2 в элементе")

    class Meta:
        verbose_name = "Обозначение части границы (от точки до точки)"


# Corresponds to XSD type[s]: tCadastralEngineer
class CadastralEngineer(models.Model):
    FamilyName = rus_100Field("Фамилия")
    FirstName = rus_100Field("Имя")
    Patronymic = rus_100Field("Отчество", null=True)
    NCertificate = sCertificate50Field(
        "Номер квалификационного аттестата кадастрового инженера"
    )
    Telephone = sNe50Field("Контактный телефон")
    Address = sNe4000Field("Почтовый адрес для связи с кадастровым инженером")
    Email = EmailAddressTypeField("Адрес электронной почты")

    class Meta:
        verbose_name = "Сведения о кадастровом инженере"
        abstract = True


# Corresponds to XSD type[s]: tCadastralNumberInp
class CadastralNumberInp(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер"
    ), null=True)
    change_parcel = models.ForeignKey(
        'ChangeParcel',
        on_delete=models.CASCADE,
        related_name="DeleteEntryParcels",
        verbose_name="change_parcel"
    )

    class Meta:
        verbose_name = "Кадастровый номер земельного участка"


# Corresponds to XSD type[s]: tCadastralNumbersInp
class CadastralNumbersInp(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер"
    ), null=True)

    class Meta:
        verbose_name = "Кадастровый номер (кадастровые номера)"


# Corresponds to XSD type[s]: tDocumentWithoutAppliedFile
class DocumentWithoutAppliedFile(models.Model):
    CodeDocument = dAllDocumentsField(
        "Код документа\n"
"008001000000 - Документы, удостоверяющие личность физического лица\n"
"008001001000 - Паспорт гражданина Российской Федерации\n"
"008001002000 - Паспорт гражданина СССР\n"
"008001003000 - Паспорт гражданина иностранного государства\n"
"008001004000 - Общегражданский заграничный паспорт\n"
"008001005000 - Заграничный паспорт Министерства морского флота\n"
"008001006000 - Дипломатический паспорт\n"
"008001007000 - Паспорт моряка (удостоверение личности моряка)\n"
"008001008000 - Военный билет военнослужащего\n"
"008001009000 - Временное удостоверение, выданное взамен военного билета\n"
"008001010000 - Удостоверение личности офицера Министерства обороны Российской Федерации, Министерства внутренних дел Российской Федерации и других воинских формирований с приложением справки о прописке (регистрации) Ф-33\n"
"008001011000 - Свидетельство о рождении\n"
"008001012000 - Свидетельство о рассмотрении ходатайства о признании беженцем на территории Российской Федерации по существу\n"
"008001013000 - Вид на жительство иностранного гражданина или лица без гражданства\n"
"008001014000 - Справка об освобождении из мест лишения свободы\n"
"008001015000 - Временное удостоверение личности гражданина Российской Федерации\n"
"008001016000 - Удостоверение вынужденного переселенца\n"
"008001017000 - Разрешение на временное проживание в Российской Федерации\n"
"008001018000 - Удостоверение беженца в Российской Федерации\n"
"008001019000 - Свидетельство о рассмотрении ходатайства о признании лица вынужденным переселенцем\n"
"008001020000 - Свидетельство о предоставлении временного убежища на территории Российской Федерации\n"
"008001099000 - Иные документы, предусмотренные законодательством Российской Федерации или признаваемые в соответствии с международным договором Российской Федерации в качестве документов, удостоверяющих личность\n"
"008002000000 - Документы, идентифицирующие юридическое лицо\n"
"008002001000 - Свидетельство о государственной регистрации юридического лица\n"
"008002002000 - Свидетельство о внесении записей в ЕГРЮЛ\n"
"008002004000 - Устав\n"
"008002005000 - Учредительный договор\n"
"008002006000 - Положение (общее положение об организации)\n"
"008002007000 - Свидетельство (или уведомление) о постановке на учёт в налоговом органе с указанием ИНН\n"
"008002008000 - Выписка из ЕГРЮЛ\n"
"008002099000 - Иной документ\n"
"555001000000 - Квитанция\n"
"555002000000 - Платёжное поручение\n"
"555003000000 - Чек\n"
"555004000000 - Подтверждение электронного платежа\n"
"555005000000 - Документ, подтверждающий право заявителя на безвозмездное получение сведений\n"
"558100000000 - ЗАЯВЛЕНИЯ\n"
"558101000000 - Заявления и запросы, связанные с государственным кадастровым учётом\n"
"558101010000 - Запрос о предоставлении сведений, внесённых в государственный кадастр недвижимости, в виде кадастровой выписки об объекте недвижимости, кадастрового паспорта объекта недвижимости и кадастрового плана территории, кадастровой справки о кадастровой стоимости объекта недвижимости\n"
"558101020000 - Заявление о постановке на государственный кадастровый учёт объекта недвижимости\n"
"558101030000 - Заявление о государственном кадастровом учёте изменений объекта недвижимости\n"
"558101040000 - Заявление о внесении в Единый государственный реестр объектов капитального строительства (ЕГРОКС) сведений об объекте капитального строительства (ОКС)\n"
"558101050000 - Запрос о предоставлении сведений об ОКС\n"
"558101060000 - Заявление о снятии с государственного кадастрового учёта объекта недвижимости\n"
"558101070000 - Заявление о внесении в государственный кадастр недвижимости сведений о ранее учтённом объекте недвижимости\n"
"558101080000 - Заявление об исправлении кадастровой ошибки\n"
"558101090000 - Заявление об исправлении технической ошибки в сведениях государственного кадастра недвижимости\n"
"558101090100 - Заявление об исправлении технической ошибки в сведениях государственного кадастра недвижимости об объекте недвижимости\n"
"558101090200 - Заявление об исправлении технической ошибки в сведениях государственного кадастра недвижимости о прохождении участка Государственной границы Российской Федерации; о границах между субъектами Российской Федерации; о границах муниципальных образований; о границах населённых пунктов; о территориальных зонах и зонах с особыми условиями использования территорий; о картографической и геодезической основах государственного кадастра недвижимости\n"
"558101100000 - Заявление о представлении дополнительных документов на государственный кадастровый учёт\n"
"558101110000 - Внутриведомственный запрос информации государственного кадастра недвижимости\n"
"558101120000 - Запрос о предоставлении копии документа, на основании которого сведения об объекте недвижимости внесены в государственный кадастр недвижимости\n"
"558101130000 - Запрос о предоставлении сведений, внесённых в государственный кадастр недвижимости, посредством обеспечения доступа к информационному ресурсу, содержащему сведения государственного кадастра недвижимости\n"
"558101140000 - Запрос о предоставлении перечня объектов недвижимости, подлежащих государственной кадастровой оценке\n"
"558101150000 - Заявление о прекращении осуществления кадастрового учёта\n"
"558101160000 - Межведомственный запрос документов в органах государственной власти и органах местного самоуправления\n"
"558101170000 - Запрос документов о ранее учтённом объекте недвижимости в органах государственной власти, органах местного самоуправления или органах и организациях по государственному техническому учёту и (или) технической инвентаризации\n"
"558102000000 - Заявления и запросы, связанные с регистрацией прав\n"
"558102010000 - Заявление о государственной регистрации права на недвижимое имущество, сделки с ним, ограничения (обременения), перехода, прекращения права на недвижимое имущество\n"
"558102020000 - Заявление о государственной регистрации прекращения права (ограничения (обременения) права)\n"
"558102030000 - Заявление о внесении изменений в ЕГРП\n"
"558102040000 - Заявление об исправлении технической ошибки\n"
"558102050000 - Заявление о представлении дополнительных документов для государственной регистрации прав\n"
"558102060000 - Заявление о приостановлении государственной регистрации прав на недвижимое имущество и сделок с ним\n"
"558102070000 - Заявление о возобновлении государственной регистрации\n"
"558102080000 - Заявление о прекращении государственной регистрации\n"
"558102090000 - Заявление о повторной выдаче свидетельства о государственной регистрации права\n"
"558102100000 - Запрос о предоставлении сведений, содержащихся в Едином государственном реестре прав на недвижимое имущество и сделок с ним\n"
"558102110000 - Заявление о постановке на учёт бесхозяйных недвижимых вещей\n"
"558102120000 - Заявление о выдаче закладной (новой закладной, дубликата закладной, аннулированной закладной)\n"
"558102130000 - Запрос о выдаче копий договоров и иных документов, выражающих содержание односторонних сделок, совершенных в простой письменной форме\n"
"558102140000 - Заявление о приостановлении государственной регистрации, возврате документов без проведения государственной регистрации, представлении дополнительных документов, о возобновлении государственной регистрации, ранее приостановленной по заявлению правообладателя, стороны (сторон) сделки, лица, чьё право ограничивается (обременяется), лица, в пользу которого право ограничивается (обременяется), законного владельца закладной (их представителя)\n"
"558102150000 - Заявление о повторной выдаче нового свидетельства о государственной регистрации права, выдаче закладной, внесении изменений в запись Единого государственного реестра прав на недвижимое имущество и сделок с ним, погашении регистрационной записи об ипотеке\n"
"558102160000 - Заявление о принятии объекта недвижимого имущества вновь во владение, пользование и распоряжение (в собственность)\n"
"558102170000 - Заявление о внесении в Единый государственный реестр прав на недвижимое имущество и сделок с ним отметки о наличии судебного спора в отношении зарегистрированного права\n"
"558102180000 - Заявление об исправлении технической ошибки в записях Единого государственного реестра прав на недвижимое имущество и сделок с ним, о наличии возражения в отношении зарегистрированного права на объект недвижимости, о погашении записи в Едином государственном реестре прав на недвижимое имущество и сделок с ним о наличии возражения в отношении зарегистрированного права на объект недвижимости, о невозможности государственной регистрации перехода, ограничения (обременения), прекращения права на объект недвижимости без личного участия собственника (его законного представителя), об отзыве ранее представленного заявления о невозможности государственной регистрации перехода, ограничения (обременения), прекращения права на объект недвижимости без личного участия собственника (его законного представителя)\n"
"558102190000 - Заявление о скреплении добавочного листа (добавочных листов) с закладной\n"
"558102200000 - Запрос о предоставлении сведений, содержащихся в Едином государственном реестре прав на недвижимое имущество и сделок с ним, посредством обеспечения доступа к информационному ресурсу, содержащему сведения Единого государственного реестра прав на недвижимое имущество и сделок с ним\n"
"558102210000 - Заявление о государственной регистрации законного владельца закладной\n"
"558102220000 - Заявление о внесении изменений в запись Единого государственного реестра прав на недвижимое имущество и сделок с ним, погашении регистрационной записи об ипотеке\n"
"558103000000 - Заявления о государственном учёте зданий, сооружений, помещений, объектов незавершённого строительства (объектов учёта) и запросы о предоставлении сведений, внесённых в Единый государственный реестр\n"
"558103010000 - Заявление о постановке на государственный учёт объекта учёта\n"
"558103020000 - Заявление о внесении в ЕГРОКС сведений о ранее учтённом объекте капитального строительства\n"
"558103030000 - Заявление о государственном учёте изменений объекта учёта\n"
"558103040000 - Заявление о снятии с государственного учёта объекта учёта\n"
"558103050000 - Заявление об исправлении технической ошибки\n"
"558103060000 - Заявление об исключении сведений из ЕГРОКС, носящих временный характер\n"
"558103070000 - Запрос о предоставлении копии документа, на основании которого сведения об объекте внесены в Единый государственный реестр\n"
"558103080000 - Запрос о предоставлении сведений, внесенных в Единый государственный реестр\n"
"558103090000 - Заявление о представлении дополнительных документов на государственный учёт\n"
"558104000000 - Заявление о возврате платежа\n"
"558199000000 - Иное заявление\n"
"558200000000 - ДОКУМЕНТЫ, СОДЕРЖАЩИЕ ОПИСАНИЕ ОБЪЕКТА\n"
"558201000000 - Описание земельных участков\n"
"558202000000 - Землеустроительное дело\n"
"558203000000 - Межевой план\n"
"558204000000 - Документ (копия), на основании которого сведения об объекте недвижимости внесены в ГКН\n"
"558205000000 - Технический паспорт объекта учёта\n"
"558205010000 - Технический паспорт домовладения\n"
"558205020000 - Технический паспорт здания (строения)\n"
"558205030000 - Технический паспорт жилого помещения (квартиры)\n"
"558205040000 - Технический паспорт объекта индивидуального жилищного строительства\n"
"558205050000 - Технический паспорт сооружения\n"
"558205060000 - Технический паспорт объекта незавершённого строительства\n"
"558206000000 - Выписка из технического паспорта\n"
"558207000000 - Документ (копия), подтверждающий разрешение земельного спора о согласовании местоположения границ земельного участка\n"
"558208000000 - Документ (копия), подтверждающий принадлежность земельного участка к определенной категории земель\n"
"558209000000 - Документ (копия), подтверждающий установленное разрешенное использование земельного участка\n"
"558210000000 - Кадастровый план земельного участка (выписка из государственного земельного кадастра)\n"
"558211000000 - Планы иных объектов недвижимости\n"
"558211010000 - Технический план здания, сооружения, помещения либо объекта незавершённого строительства\n"
"558211020000 - План участка лесного фонда\n"
"558211030000 - План объекта недвижимости\n"
"558211040000 - Экспликация к поэтажному плану\n"
"558212000000 - Декларация об объекте недвижимости\n"
"558213000000 - Кадастровый паспорт объекта недвижимости\n"
"558213010000 - Кадастровый паспорт земельного участка\n"
"558213020000 - Кадастровый паспорт помещения (выписка из ГКН)\n"
"558213030000 - Кадастровый паспорт здания, сооружения, объекта незавершённого строительства\n"
"558214000000 - Кадастровая выписка об объекте недвижимости\n"
"558214010000 - Кадастровая выписка о земельном участке\n"
"558214020000 - Кадастровая выписка о здании, сооружении, объекте незавершённого строительства\n"
"558216000000 - Документ, подтверждающий изменение назначения здания, помещения или сооружения, наименования сооружения\n"
"558217000000 - Кадастровый план территории\n"
"558218000000 - Кадастровая справка о кадастровой стоимости объекта недвижимости\n"
"558219000000 - Акт обследования, подтверждающий прекращение существования объекта учёта\n"
"558220000000 - Документы, в виде которых предоставляются сведения Единого государственного реестра\n"
"558220010000 - Выписка из Реестра, содержащая относящиеся к информации ограниченного доступа сведения об объекте учета\n"
"558220020000 - Справка, содержащая, внесённые в Единый государственный реестр сведения о прекращении существования объекта учёта\n"
"558220030000 - Выписка из Реестра, подтверждающая факт отсутствия в Реестре сведений об объекте учета\n"
"558221000000 - ПРОЧИЕ\n"
"558221010000 - Решение о необходимости устранения кадастровой ошибки\n"
"558221020000 - Международный договор Российской Федерации, в соответствии с которым установлено или изменено прохождение государственной границы Российской Федерации\n"
"558221030000 - Документ, содержащий необходимые для внесения в государственный кадастр недвижимости сведения о границах между субъектами Российской Федерации, границах муниципального образования, границах населённого пункта\n"
"558221040000 - Документ, содержащий необходимые для внесения в государственный кадастр недвижимости сведения об установлении или изменении территориальной зоны или зоны с особыми условиями использования территорий, либо об отмене установления такой зоны\n"
"558221050000 - Решение о присвоении, изменении адреса\n"
"558221060000 - Документы органов, осуществляющих ведение лесного и водного кадастра, содержащие сведения о природных объектах\n"
"558221070000 - Документ, содержащий сведения об адресе объекта недвижимости\n"
"558221080000 - Акт об утверждении результатов определения кадастровой стоимости\n"
"558221990000 - Иной документ, содержащий описание объекта\n"
"558222000000 - Документ, воспроизводящий сведения, содержащиеся в международном договоре Российской Федерации, в соответствии с которым установлено или изменено прохождение государственной границы Российской Федерации, а также сведения о федеральном законе, которым ратифицирован международный договор Российской Федерации, и об официальном опубликовании такого федерального закона\n"
"558223000000 - Соглашение об изменении границ между субъектами Российской Федерации\n"
"558224000000 - Закон субъекта Российской Федерации об установлении или изменении границ муниципальных образований либо о преобразовании муниципальных образований\n"
"558225000000 - Акт уполномоченного органа об установлении или изменении границ населённых пунктов\n"
"558226000000 - Документ, воспроизводящий необходимые для внесения в государственный кадастр недвижимости сведения о границах между субъектами Российской Федерации, границах муниципального образования, границах населённого пункта, содержащиеся в утверждённых органами власти документах\n"
"558227000000 - Решение об установлении или изменении границ зон с особыми условиями использования территорий\n"
"558228000000 - Правовой акт, которым утверждены или изменены правила землепользования и застройки\n"
"558229000000 - Документ, подтверждающий изменение назначения помещения\n"
"558230000000 - Решение о переводе жилого помещения в нежилое помещение, нежилого помещения в жилое помещение\n"
"558231000000 - Акт приемочной комиссии, подтверждающий завершение переустройства и (или) перепланировки и (или) иных работ\n"
"558232000000 - Документы, воспроизводящие сведения об изменении назначения помещения\n"
"558233000000 - Документ, воспроизводящий сведения, содержащиеся в решении о переводе жилого помещения в нежилое помещение, нежилого помещения в жилое помещение\n"
"558234000000 - Документ, воспроизводящий сведения, содержащиеся в акте приемочной комиссии, подтверждающем завершение переустройства и (или) перепланировки и (или) иных работ\n"
"558235000000 - Документ, подтверждающий изменение назначения здания\n"
"558236000000 - Документ, подтверждающий изменение назначения сооружения\n"
"558237000000 - Решение о предоставлении разрешения на условно разрешенный вид использования\n"
"558238000000 - Решение об определении (изменении) вида разрешенного использования\n"
"558239000000 - Документ (копия), воспроизводящий сведения о предоставлении разрешения на условно разрешенный вид использования, об определении (изменении) вида разрешенного использования\n"
"558240000000 - Документ, воспроизводящий сведения, содержащиеся в решении о присвоении, изменении адреса\n"
"558241000000 - Документ, воспроизводящий содержащиеся в разрешении на ввод объекта капитального строительства в эксплуатацию сведения\n"
"558242000000 - Документ, воспроизводящий сведения, содержащиеся в реестре объектов культурного наследия (памятников истории и культуры) народов Российской Федерации\n"
"558243000000 - Документ, воспроизводящий сведения, содержащиеся в акте Правительства Российской Федерации об исключении объекта недвижимости из единого государственного реестра объектов культурного наследия (памятников истории и культуры) народов Российской Федерации\n"
"558244000000 - Документ, содержащий сведения о дате поступления документов, предусмотренных статьей 17 Федерального закона \"Об объектах культурного наследия (памятниках истории и культуры) народов Российской Федерации\", в отношении объекта недвижимости\n"
"558245000000 - Решение (копия решения) соответствующего органа государственной власти об отказе включить объект недвижимости в единый государственный реестр объектов культурного наследия (памятников истории и культуры) народов Российской Федерации\n"
"558246000000 - Акт Правительства Российской Федерации об исключении объекта недвижимости из единого государственного реестра объектов культурного наследия\n"
"558247000000 - Документ, воспроизводящий сведения о наименовании водного объекта и установленных параметрах водоохранных зон и прибрежных защитных полос, зон затопления, подтопления и других зон с особыми условиями их использования\n"
"558248000000 - Документ, воспроизводящий содержащиеся в государственном лесном реестре сведения в отношении лесного участка\n"
"558249000000 - Документ, воспроизводящий сведения, содержащиеся во вступившем в силу акте об утверждении результатов определения кадастровой стоимости\n"
"558250000000 - Документ, воспроизводящий сведения, содержащиеся в решении об установлении или изменении границ зон с особыми условиями использования территорий\n"
"558251000000 - Документ, воспроизводящий сведения, содержащиеся в правовом акте, которым утверждены или изменены правила землепользования и застройки, включая сведения о территориальных зонах\n"
"558252000000 - Карта (план) объекта землеустройства\n"
"558253000000 - Декларация заинтересованного лица о выбранном виде разрешенного использования земельного участка\n"
"558254000000 - Документы, определяющие (определявшие) в соответствии с законодательством Российской Федерации местоположение границ земельного участка (земельных участков)\n"
"558254010000 - Землеустроительная документация\n"
"558254020000 - Лесоустроительная документация\n"
"558254030000 - Документы градостроительного зонирования (Правила землепользования и застройки)\n"
"558254040000 - Документация по планировке территории (проекты межевания территорий), в т.ч. документ по планировке территории в планируемых границах искусственного земельного участка\n"
"558254050000 - Копия проекта межевания земельных участков\n"
"558254060000 - Акт отвода земельных участков в натуре\n"
"558254070000 - Проект границ земельных участков\n"
"558254080000 - Проект (копии отдельных составных частей) организации и застройки территорий садоводческих, огороднических или дачных некоммерческих объединений граждан\n"
"558254090000 - Проект (копии отдельных составных частей) перераспределения сельскохозяйственных угодий и иных земель сельскохозяйственного назначения\n"
"558254100000 - Решение о предварительном согласовании мест размещения объектов\n"
"558254110000 - Копия решения общего собрания участников долевой собственности на земельный участок из земель сельскохозяйственного назначения об утверждении проекта межевания земельных участков\n"
"558254120000 - Копия документа, подтверждающего согласование проекта межевания земельного участка\n"
"558254130000 - Возражения заинтересованных лиц по поводу местоположения границ земельного участка\n"
"558254140000 - Документ, свидетельствующий о снятии возражений заинтересованных лиц по поводу местоположения границ земельного участка\n"
"558254150000 - Схема расположения земельных участков на кадастровых планах или кадастровых картах соответствующих территорий\n"
"558254990000 - Прочие документы, определяющие (определявшие) в соответствии с законодательством Российской Федерации местоположение границ земельного участка (земельных участков)\n"
"558255000000 - Картографические материалы\n"
"558256000000 - Материалы картографо-геодезического фонда\n"
"558257000000 - Документы, устанавливающие предельные минимальные и максимальные размеры, соответствующие виду разрешенного использования земельного участка\n"
"558257010000 - Федеральный закон\n"
"558257020000 - Закон субъекта Российской Федерации\n"
"558257030000 - Нормативный правовой акт органа местного самоуправления\n"
"558258000000 - Документ, содержащий информацию о ранее присвоенных государственных учетных номерах объекта недвижимости\n"
"558259000000 - Протокол образования земельных участков\n"
"558260000000 - Чертеж (абрис) помещения\n"
"558261000000 - Проектная документация здания\n"
"558262000000 - Проектная документация сооружения\n"
"558263000000 - Решение комиссии по рассмотрению споров о результатах определения кадастровой стоимости\n"
"558264000000 - Решение суда\n"
"558299000000 - Иной документ, содержащий описание объекта\n"
"558300000000 - ДОКУМЕНТЫ, СОДЕРЖАЩИЕ ОПИСАНИЕ ЗАЯВИТЕЛЯ ИЛИ ЕГО ПРЕДСТАВИТЕЛЯ\n"
"558301000000 - Документы, подтверждающие полномочия представителя\n"
"558301010000 - Доверенность\n"
"558301020000 - Свидетельство о рождении\n"
"558301030000 - Свидетельство об усыновлении\n"
"558301040000 - Решение суда\n"
"558301050000 - Определение суда\n"
"558301060000 - Протокол об избрании (единоличного исполнительного органа юридического лица)\n"
"558301070000 - Выписка из протокола об избрании (единоличного исполнительного органа юридического лица)\n"
"558301080000 - Приказ о назначении (руководителя или иного уполномоченного лица)\n"
"558301090000 - Решение органов опеки и попечительства\n"
"558301100000 - Договор коммерческого представительства\n"
"558301110000 - Договор доверительного управления\n"
"558301120000 - Постановление судебного пристава-исполнителя\n"
"558301130000 - Протокол общего собрания\n"
"558301140000 - Акт органа государственной власти или органа местного самоуправления, подтверждающий полномочия представителя заявителя\n"
"558301990000 - Иной документ\n"
"558400000000 - ДОКУМЕНТЫ О ПРАВАХ, СДЕЛКАХ, ОГРАНИЧЕНИЯХ (ОБРЕМЕНЕНИЯХ)\n"
"558401000000 - Правоустанавливающие и правоудостоверяющие документы\n"
"558401010000 - Договоры / соглашения\n"
"558401010100 - Сделки об отчуждении\n"
"558401010101 - Договор купли-продажи\n"
"558401010102 - Договор мены\n"
"558401010103 - Договор дарения\n"
"558401010104 - Договор ренты\n"
"558401010105 - Договор пожизненного содержания с иждивением\n"
"558401010106 - Договор приватизации (договор передачи объекта недвижимости в собственность)\n"
"558401010200 - Другие сделки\n"
"558401010201 - Договор участия в долевом строительстве\n"
"558401010202 - Соглашение об определении (перераспределении) долей в праве общей долевой собственности\n"
"558401010203 - Брачный договор\n"
"558401010204 - Соглашение об отступном\n"
"558401010205 - Соглашение о разделе имущества\n"
"558401010206 - Соглашение о выделе доли\n"
"558401010207 - Инвестиционный договор (договор об инвестировании)\n"
"558401010208 - Мировое соглашение\n"
"558401010209 - Договор аренды (субаренды)\n"
"558401010210 - Договор об ипотеке\n"
"558401010211 - Договор безвозмездного срочного пользования земельным участком\n"
"558401010212 - Кредитный договор\n"
"558401010213 - Договор займа\n"
"558401010214 - Соглашение об установлении сервитута\n"
"558401010215 - Соглашение об изменении содержания закладной\n"
"558401010216 - Дополнительное соглашение (соглашение об изменении условий договора) к договору\n"
"558401010217 - Соглашение о расторжении договора\n"
"558401010218 - Соглашение об уступке прав требования по договору (договор о передаче прав и обязанностей)\n"
"558401010219 - Договор простого товарищества (договор о совместной деятельности)\n"
"558401010220 - Государственный контракт\n"
"558401010299 - Иная сделка\n"
"558401020000 - Акты органов государственной власти или органов местного самоуправления\n"
"558401020100 - Федеральный закон\n"
"558401020200 - Указ Президента Российской Федерации\n"
"558401020300 - Постановление Правительства Российской Федерации\n"
"558401020400 - Закон (законы Российской Федерации, субъекта Российской Федерации)\n"
"558401020500 - Документ о предоставлении земельных участков\n"
"558401020600 - Решение об образовании земельных участков\n"
"558401020700 - Акт об установлении сервитута\n"
"558401020800 - Акт об установлении ограничения (обременения)\n"
"558401029900 - Иные акты органов государственной власти или органов местного самоуправления\n"
"558401030000 - Свидетельство о праве на наследство\n"
"558401030100 - Свидетельство о праве на наследство по закону\n"
"558401030200 - Свидетельство о праве на наследство по завещанию\n"
"558401040000 - Вступившие в силу судебные акты\n"
"558401040100 - Судебный акт, устанавливающий запрет на совершение действий в сфере государственного кадастрового учета в отношении объекта недвижимости\n"
"558401040200 - Судебный акт о восстановлении аннулированных и исключенных из государственного кадастра недвижимости сведений об объекте недвижимости\n"
"558401040300 - Судебный акт об установлении обременения (ограничении) в использовании объекта недвижимости (части объекта недвижимости)\n"
"558401049900 - Иные предусмотренные законодательством судебные акты\n"
"558401050000 - Акты (свидетельства) о правах на объекты недвижимости\n"
"558401050100 - Регистрационное удостоверение\n"
"558401050200 - Свидетельство о праве на землю\n"
"558401050300 - Государственный акт о праве на землю\n"
"558401050400 - Свидетельство о праве собственности\n"
"558401059900 - Иные акты, свидетельства о правах на объекты недвижимости\n"
"558401060000 - Документы на вновь возведенный (реконструированный) объект\n"
"558401060100 - Разрешение на ввод объекта в эксплуатацию\n"
"558401060200 - Разрешение на строительство\n"
"558401060300 - Акт ввода в эксплуатацию\n"
"558401060400 - Копия решения о создании искусственного земельного участка\n"
"558401070000 - Документы при упрощенном порядке оформления прав граждан на отдельные объекты недвижимого имущества\n"
"558401070100 - Выписка из похозяйственной книги о наличии у гражданина права на земельный участок\n"
"558401070200 - Кадастровый паспорт объекта недвижимости\n"
"558401070300 - Декларация об объекте недвижимого имущества\n"
"558401080000 - Прочие правоустанавливающие документы\n"
"558401080100 - Передаточный акт\n"
"558401080200 - Разделительный баланс\n"
"558401080300 - План приватизации\n"
"558401080400 - Правила доверительного управления\n"
"558401080500 - Акт описи и ареста имущества\n"
"558401080600 - Протокол о выделе земельного участка в счет земельной доли\n"
"558401080700 - Протокол общего собрания собственников помещений в многоквартирном доме\n"
"558401080800 - Отказ одаряемого принять дар (отказ от дара)\n"
"558401080900 - Соглашение о новации\n"
"558401081000 - Соглашение о разделе наследственного имущества\n"
"558401081100 - Соглашение об уплате алиментов\n"
"558401081200 - Документ, подтверждающий наличие, возникновение, переход ограничения (обременения) вещного права на объект недвижимости в пользу заявителя\n"
"558401089900 - Иной документ\n"
"558402000000 - СОПУТСТВУЮЩИЕ И ДОПОЛНИТЕЛЬНЫЕ ДОКУМЕНТЫ\n"
"558402010000 - Согласие супруга на совершение сделки\n"
"558402020000 - Согласие органов опеки и попечительства\n"
"558402030000 - Свидетельство о заключении брака\n"
"558402040000 - Свидетельство о расторжении брака\n"
"558402050000 - Решение об одобрении (о совершении) сделки\n"
"558402060000 - Справка о стоимости (справка о соотношении стоимости отчуждаемого объекта и балансовой стоимости имущества или активов хозяйственного общества)\n"
"558402070000 - Справка о заинтересованных лицах в сделке\n"
"558402080000 - Выписка из домовой книги (сведения о лицах, сохраняющих право проживания в жилом помещении после перехода права на него)\n"
"558402090000 - Выписка из лицевого счета (сведения о лицах, сохраняющих право проживания в жилом помещении после перехода права на него)\n"
"558402100000 - Протокол о результатах торгов\n"
"558402110000 - Лицензия (лицензия на осуществление определенных видов деятельности)\n"
"558402120000 - Проектная декларация\n"
"558402130000 - Отказ от преимущественного права покупки (для участников долевой собственности, для субъекта Российской Федерации при продаже земельного участка из состава земель сельскохозяйственного назначения)\n"
"558402140000 - Решение о создании юридического лица\n"
"558402150000 - Решение о реорганизации юридического лица\n"
"558402160000 - Решение о ликвидации юридического лица\n"
"558402170000 - Решение об утверждении оценки имущества (решение об утверждении оценки неденежных вкладов в уставный капитал общества)\n"
"558402180000 - Исполнительный лист\n"
"558402190000 - Договор поручения\n"
"558402200000 - Бухгалтерский баланс\n"
"558402210000 - Закладная\n"
"558402220000 - Добавочный лист к закладной\n"
"558402230000 - Выписка из реестра муниципальной собственности\n"
"558402240000 - Выписка из реестра собственности субъекта Российской Федерации\n"
"558402250000 - Выписка из реестра федерального имущества\n"
"558402260000 - Жилищный сертификат\n"
"558402270000 - Аудиторское заключение\n"
"558402280000 - Отчет о проведении независимой оценки (акт оценки)\n"
"558402390000 - Акт инвентаризации\n"
"558402400000 - Охранное обязательство собственника объекта культурного наследия\n"
"558402990000 - Иной документ\n"
"558403000000 - ДОКУМЕНТЫ, СОДЕРЖАЩИЕ СВЕДЕНИЯ ЕГРП\n"
"558403010000 - Свидетельство о государственной регистрации права\n"
"558403020000 - Выписка о правах на объект недвижимого имущества\n"
"558403030000 - Выписка о переходе прав на объект недвижимого имущества\n"
"558403040000 - Выписка о правах отдельного лица на имеющиеся у него объекты недвижимого имущества\n"
"558403050000 - Выписка о признании правообладателя недееспособным или ограниченно дееспособным\n"
"558403060000 - Справка о содержании правоустанавливающих документов на объект недвижимого имущества\n"
"558403070000 - Справка о лицах, получивших сведения об объекте недвижимого имущества\n"
"558403080000 - Копии договоров и иных документов, выражающих содержание односторонних сделок, совершенных в простой письменной форме\n"
"558403090000 - Выписка из ЕГРП о принятии на учёт бесхозяйного объекта недвижимого имущества\n"
"558403100000 - Выписка из ЕГРП о принятии на учёт бесхозяйного объекта недвижимого имущества, от права собственности на который собственник отказался\n"
"558403110000 - Выписка из ЕГРП о бесхозяйном объекте недвижимого имущества, принятом на учёт\n"
"558403120000 - Выписка из единого государственного реестра прав на недвижимое имущество и сделок с ним, удостоверяющая проведение государственной регистрации возникновения и (или) перехода прав на недвижимое имущество\n"
"558403990000 - Иной документ\n"
"558404000000 - Соглашения и согласия об образовании земельных участков\n"
"558404010000 - Соглашение о разделе, об объединении, о перераспределении земельных участков или о выделе из земельных участков\n"
"558404020000 - Согласие на образование земельных участков\n"
"558404030000 - Соглашение об образовании общей долевой собственности на земельный участок, образуемый при выделе его в счет земельной доли или земельных долей\n"
"558404040000 - Соглашение об образовании общей совместной собственности на земельный участок, образуемый при выделе его в счет земельной доли или земельных долей\n"
"558405000000 - Документы, подтверждающие возникновение права собственности в отношении земельного участка в силу федерального закона вне зависимости от момента государственной регистрации этого права в ЕГРП\n"
"558405010000 - Копия решения о безвозмездной передаче военного недвижимого имущества из федеральной собственности в собственность субъекта Российской Федерации - города федерального значения Москвы или Санкт-Петербурга либо муниципальную собственность\n"
"558405020000 - Подлинник или копия письма органа исполнительной власти субъекта Российской Федерации - города федерального значения Москвы или Санкт-Петербурга либо органа местного самоуправления муниципального образования о согласовании границ образуемого земельного участка с приложением согласованного проекта границ земельного участка в случае, если акт согласования границ земельного участка не заверен подписью уполномоченного должностного лица соответствующего органа\n"
"558405030000 - Решение об изъятии земельных участков и (или) расположенных на них иных объектов недвижимого имущества в целях размещения олимпийских объектов\n"
"558405040000 - Копия акта приема-передачи объектов недвижимого имущества, в отношении которых принято решение об изъятии в целях размещения олимпийских объектов\n"
"558405990000 - Иные документы, подтверждающие возникновение права собственности в отношении земельного участка в силу федерального закона вне зависимости от момента государственной регистрации этого права в ЕГРП\n"
"558500000000 - Решения, уведомления, расписки\n"
"558501000000 - Документы о результатах государственного кадастрового учёта\n"
"558501010000 - РЕШЕНИЯ\n"
"558501010100 - Решение об отказе в предоставлении запрашиваемых сведений\n"
"558501010200 - Решение об отказе в исправлении кадастровой ошибки\n"
"558501010300 - Решение об отказе в исправлении технической ошибки\n"
"558501010400 - Решение об исправлении технической и кадастровой ошибок\n"
"558501010500 - Решение об отказе в осуществлении кадастровой процедуры\n"
"558501010600 - Решение о приостановлении осуществления кадастровой процедуры\n"
"558501010700 - Решение об отказе в снятии приостановления\n"
"558501010800 - Решение о снятии с кадастрового учёта земельных участков со статусом «временные» по заявлению заинтересованного лица\n"
"558501010900 - Решение об отказе в выдаче кадастрового паспорта\n"
"558501011000 - Решение об осуществлении кадастровой процедуры\n"
"558501011100 - Решение об аннулировании кадастровых сведений\n"
"558501011200 - Решение об отклонении заявления об исправлении технической ошибки\n"
"558501011300 - Решение о внесении записи о наличии возражения\n"
"558501011400 - Решение о погашении записи о наличии возражения\n"
"558501011500 - Решение о внесении записи о заявлении о невозможности государственной регистрации\n"
"558501011600 - Решение о погашении записи о заявлении о невозможности государственной регистрации\n"
"558501020000 - УВЕДОМЛЕНИЯ\n"
"558501020100 - Уведомление об отсутствии в ГКН запрашиваемых сведений\n"
"558501020200 - Уведомление об осуществлённом кадастровом учёте\n"
"558501020300 - Уведомление об отказе в приеме документов для внесения в Единый государственный реестр объектов капитального строительства (далее - Единый государственный реестр) сведений об ОКС\n"
"558501020400 - Уведомление об отказе в приеме документов для предоставления из Единого государственного реестра сведений об ОКС\n"
"558501020500 - Уведомление об устранении технической ошибки в сведениях ГКН\n"
"558501020600 - Уведомление об отказе в выдаче сведений об ОКС\n"
"558501020700 - Уведомление о приостановлении осуществления кадастровой процедуры\n"
"558501020800 - Уведомление об отказе в осуществлении кадастровой процедуры\n"
"558501020900 - Уведомление о регистрации права\n"
"558501021000 - Уведомление о приостановлении принятия на учёт имущества в качестве бесхозяйного\n"
"558501021100 - Сообщение об отказе в принятии на учёт имущества в качестве бесхозяйного\n"
"558501021200 - Уведомление о снятии с учёта имущества в качестве бесхозяйного\n"
"558501021300 - Уведомление о возврате заявления о наличии возражения в отношении зарегистрированного права на объект недвижимости без рассмотрения\n"
"558501030000 - ПРОЧИЕ\n"
"558501030100 - Расписка в получении соответствующих документов для проведения государственного кадастрового учёта\n"
"558501030200 - Протокол проверки документов\n"
"558501030300 - Акт определения кадастровой стоимости земельных участков\n"
"558501030400 - Протокол выявления технической ошибки\n"
"558501030500 - Акт определения кадастровой стоимости объектов недвижимости\n"
"558501039900 - Иные документы\n"
"558502000000 - ДОКУМЕНТЫ О РЕЗУЛЬТАТАХ РЕГИСТРАЦИИ ПРАВ\n"
"558502010000 - УВЕДОМЛЕНИЯ, СООБЩЕНИЯ\n"
"558502010100 - Уведомление о приостановлении государственной регистрации прав\n"
"558502010200 - Уведомление о прекращении государственной регистрации прав\n"
"558502010300 - Уведомление о зарегистрированных ограничениях (обременениях) прав\n"
"558502010400 - Уведомление о внесении изменений в ЕГРП\n"
"558502010500 - Уведомление об исправлении технической ошибки в записях единого государственного реестра прав на недвижимое имущество и сделок с ним\n"
"558502010600 - Сообщение об отказе в государственной регистрации прав\n"
"558502010700 - Сообщение об отказе в предоставлении сведений из ЕГРП\n"
"558502010800 - Уведомление об отсутствии в ЕГРП запрашиваемых сведений\n"
"558502010900 - Сообщение о приёме заявления о государственной регистрации права, ограничения (обременения) права на предприятие, сделки с ним\n"
"558502011000 - Сообщение о поступлении документов на государственную регистрацию договоров мены и (или) перехода права\n"
"558502011100 - Уведомление о возврате приложенных к заявлению документов без рассмотрения\n"
"558502011200 - Уведомление о государственной регистрации прекращения ограничения (обременения)\n"
"558502011300 - Уведомление об отсутствии сведений о лицах, получивших сведения об объектах недвижимого имущества\n"
"558502011400 - Уведомление о государственной регистрации права собственности субъекта Российской Федерации или муниципального образования на земельный участок или земельную долю вследствие отказа от соответствующего права правообладателем\n"
"558502011500 - Уведомление о поступлении решения суда, вступившего в законную силу, с указанием срока окончания осуществления государственной регистрации прав, в случае если отказ в государственной регистрации прав признан судом необоснованным\n"
"558502011600 - Уведомление о внесении изменений в единый государственный реестр прав на недвижимое имущество и сделок с ним в связи с изменением содержащихся в базовых государственных информационных ресурсах сведений о правообладателе (правообладателях)\n"
"558502011700 - Уведомление о возврате документов без рассмотрения при отказе в осуществлении государственного кадастрового учета\n"
"558502020000 - ПРОЧИЕ\n"
"558502020100 - Расписка в получении документов на государственную регистрацию прав\n"
"558502029900 - Иной документ\n"
"558601000000 - Расписка в получении извещений о проведении собрания о согласовании местоположения границ\n"
"558602000000 - Уведомление о вручении извещения о проведении собрания о согласовании местоположения границ\n"
"558603000000 - Копия страницы печатного издания, содержащей извещение о проведении собрания о согласовании местоположения границ земельного участка, включая первый лист, содержащего реквизиты такого печатного издания\n"
"558699000000 - Иные документы, свидетельствующие о соблюдении установленного порядка извещения заинтересованных лиц о проведении собрания о согласовании местоположения границ земельного участка"
    )
    Name = s500Field("Наименование документа", null=True)
    Series = s45Field("Серия документа", null=True)
    Number = sNe45Field("Номер документа")
    Date = models.DateField("Дата выдачи (подписания) документа", null=True)
    IssueOrgan = s500Field(
        "Организация, выдавшая документ. Автор документа",
        null=True
    )
    Desc = s1000Field("Особые отметки", null=True)

    class Meta:
        verbose_name = "Реквизиты документа"


# Corresponds to XSD type[s]: tDocumentAndPDF
class DocumentAndPDF(DocumentWithoutAppliedFile):
    AppliedFilePDF = models.ForeignKey(
        AppliedFilePDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Приложенный файл в формате PDF"
    )

    class Meta:
        verbose_name = "Реквизиты документа с приложенным образом в формате PDF"


# Corresponds to XSD type[s]: tCategoryDoc
class CategoryDoc(models.Model):
    Category = dCategoriesField(
        "Код категории\n"
"003001000000 - Земли сельскохозяйственного назначения\n"
"003002000000 - Земли населенных пунктов\n"
"003003000000 - Земли промышленности, энергетики, транспорта, связи, радиовещания, телевидения, информатики, земли для обеспечения космической деятельности, земли обороны, безопасности и земли иного специального назначения\n"
"003004000000 - Земли особо охраняемых территорий и объектов\n"
"003005000000 - Земли лесного фонда\n"
"003006000000 - Земли водного фонда\n"
"003007000000 - Земли запаса\n"
"003008000000 - Категория не установлена"
    )
    DocCategory = models.ForeignKey(
        DocumentAndPDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Реквизиты документа, подтверждающего сведения о категории земель"
    )

    class Meta:
        verbose_name = "Категория земель и реквизиты документа, подтверждающего сведения о категории земель"


# Corresponds to XSD type[s]: tProvidingPassCadastralNumbers
class ProvidingPassCadastralNumbers(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер земельного участка, посредством которого обеспечивается доступ::Кадастровый номер земельного участка, посредством которого обеспечивается доступ"
    ), null=True)
    Definition = ArrayField(models.TextField(
        "Обозначение земельного участка, посредством которого обеспечивается доступ::Обозначение земельного участка, посредством которого обеспечивается доступ"
    ), null=True)
    Other = models.TextField("Иное", null=True)
    # Documents is declared as a reverse relation from DocumentAndPDF
    # Documents = OneToManyField(
    #     DocumentAndPDF,
    #     verbose_name="Документы - основания для внесения сведений"
    # )

    class Meta:
        verbose_name = "Сведения о земельных участках, посредством которых обеспечивается доступ"


# Corresponds to XSD type[s]: tChangeParcel
class ChangeParcel(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер"
    ), null=True)
    CadastralBlock = CadastralBlockTypeField("Номер кадастрового квартала")
    ProvidingPassCadastralNumbers = models.ForeignKey(
        ProvidingPassCadastralNumbers,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения о земельных участках, посредством которых обеспечивается доступ"
    )
    ObjectRealty_InnerCadastralNumbers = ArrayField(CadastralNumberTypeField(
        "Сведения о наличии зданий, сооружений, объектов незавершенного строительства, расположенных на измененном земельном участке::Кадастровые номера зданий, сооружений, объектов незавершенного строительства, расположенных на земельном участке::Кадастровый номер"
    ), null=True)
    # ObjectRealty_OldNumbers is declared as a reverse relation from OldNumber
    # ObjectRealty_OldNumbers = OneToManyField(
    #     OldNumber,
    #     verbose_name="Ранее присвоенные государственные учетные номера"
    # )
    # SubParcels_NewSubParcel is declared as a reverse relation from NewSubParcel
    # SubParcels_NewSubParcel = OneToManyField(
    #     NewSubParcel,
    #     verbose_name="Образуемая часть участка"
    # )
    # SubParcels_ExistSubParcel is declared as a reverse relation from ExistSubParcel
    # SubParcels_ExistSubParcel = OneToManyField(
    #     ExistSubParcel,
    #     verbose_name="Существующая (уточняемая, изменяемая) часть участка"
    # )
    # SubParcels_InvariableSubParcel is declared as a reverse relation from InvariableSubParcel
    # SubParcels_InvariableSubParcel = OneToManyField(
    #     InvariableSubParcel,
    #     verbose_name="Существующая (неизменяемая) часть участка"
    # )
    # DeleteEntryParcels is declared as a reverse relation from CadastralNumberInp
    # DeleteEntryParcels = OneToManyField(
    #     CadastralNumberInp,
    #     verbose_name="Исключаемые из состава измененного ЕЗ входящие участки"
    # )
    # TransformationEntryParcels is declared as a reverse relation from CadastralNumberInp
    # TransformationEntryParcels = OneToManyField(
    #     CadastralNumberInp,
    #     verbose_name="Входящие в состав ЕЗ участки, преобразование которых осуществляется"
    # )
    # TransformationContours is declared as a reverse relation from ChangeParcelTransformationContour
    # TransformationContours = OneToManyField(
    #     ChangeParcelTransformationContour,
    #     verbose_name="Контуры многоконтурного земельного участка, преобразование которых осуществляется"
    # )
    Note = models.TextField("Иные сведения", null=True)
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Package_FormParcels_ChangeParcel",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Описание измененного земельного участка и его частей"


# Corresponds to XSD type[s]: tChangeParcel.TransformationContours_TransformationContour
class ChangeParcelTransformationContour(models.Model):
    NumberRecord = p10Field("Учетный номер контура")
    ProvidingPassCadastralNumbers = models.ForeignKey(
        ProvidingPassCadastralNumbers,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения о земельных участках, посредством которых обеспечивается доступ к измененному контуру многоконтурного участка"
    )
    change_parcel = models.ForeignKey(
        'ChangeParcel',
        on_delete=models.CASCADE,
        related_name="TransformationContours",
        verbose_name="change_parcel"
    )

    class Meta:
        verbose_name = "Контур многоконтурного земельного участка, преобразование которого осуществляется"


# Corresponds to XSD type[s]: tIdentify
class Identify(models.Model):
    Name = sNameNew500Field("Полное наименование")
    INN = LegalPersonINNTypeField("ИНН")
    OGRN = OGRNCompanyTypeField("ОГРН")

    class Meta:
        verbose_name = "Реквизиты"


# Corresponds to XSD type[s]: tClientIdentify.ForeignOrganization
class ClientForeignOrg(Identify):
    Country = sNe255Field("Наименование страны регистрации (инкорпорации)")

    class Meta:
        verbose_name = "Иностранное юридическое лицо"


# Corresponds to XSD type[s]: tClientIdentify.Person
class ClientPerson(models.Model):
    FamilyName = rus_100Field("Фамилия")
    FirstName = rus_100Field("Имя")
    Patronymic = rus_100Field("Отчество", null=True)
    # xs:choice start
    Address = models.ForeignKey(
        AddressInpFull,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес"
    )
    Document = models.ForeignKey(
        DocumentWithoutAppliedFile,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Реквизиты документа"
    )
    SNILS = SNILSTypeField(
        "Страховой номер индивидуального лицевого счета",
        null=True
    )
    # xs:choice end

    class Meta:
        verbose_name = "Физическое лицо"


# Corresponds to XSD type[s]: tClientIdentify
class ClientIdentify(models.Model):
    # xs:choice start
    Person = models.ForeignKey(
        ClientPerson,
        null=True,
        on_delete=models.CASCADE,
        verbose_name="Физическое лицо"
    )
    Organization = models.ForeignKey(
        Identify,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Юридическое лицо"
    )
    Governance = models.ForeignKey(
        Identify,
        null=True,
        on_delete=models.PROTECT,
        related_name="client_identify_as_Governance",
        verbose_name="Орган государственной власти, орган местного самоуправления"
    )
    ForeignOrganization = models.ForeignKey(
        ClientForeignOrg,
        null=True,
        on_delete=models.CASCADE,
        verbose_name="Иностранное юридическое лицо"
    )
    # xs:choice end
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="GeneralCadastralWorks_Clients",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Сведения о заказчике кадастровых работ"


# Corresponds to XSD type[s]: tCoordSystem
class CoordSystem(models.Model):
    Name = s2046Field("Наименование системы координат", null=True)
    CsId = sID255Field(
        "Код системы координат, на который ссылаются пространственные объекты (EntitySpatial)"
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="CoordSystems",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Система координат"


# Corresponds to XSD type[s]: tDocumentAndAppliedFile
class DocumentAndAppliedFile(DocumentWithoutAppliedFile):
    AppliedFile = models.ForeignKey(
        AppliedFile,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Приложенный файл"
    )

    class Meta:
        verbose_name = "Реквизиты документа с приложенным файлом"


# Corresponds to XSD type[s]: tEncumbrance
class Encumbrance(models.Model):
    # xs:choice start
    AccountNumber = s255Field("Учётный номер зоны", null=True)
    CadastralNumberRestriction = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер ЗУ, в пользу которого установлен сервитут"
    ), null=True)
    # xs:choice end
    Name = s4000Field("Содержание ограничения (обременения) права", null=True)
    Type = dEncumbrancesField(
        "Вид обременения\n"
"022001000000 - Сервитут\n"
"022001001000 - Публичный сервитут\n"
"022001002000 - Частный сервитут\n"
"022002000000 - Арест\n"
"022003000000 - Запрещение\n"
"022004000000 - Ограничения прав на земельный участок, предусмотренные статьями 56, 56.1 Земельного кодекса Российской Федерации\n"
"022005000000 - Решение об изъятии земельного участка, жилого помещения\n"
"022006000000 - Аренда (в том числе, субаренда)\n"
"022007000000 - Ипотека\n"
"022008000000 - Ипотека в силу закона\n"
"022009000000 - Безвозмездное (срочное) пользование земельным/лесным участком\n"
"022010000000 - Доверительное управление\n"
"022011000000 - Рента\n"
"022012000000 - Запрет на совершение действий в сфере ГКУ в отношении ОН\n"
"022099000000 - Иные ограничения (обременения) прав"
    )
    # Documents is declared as a reverse relation from DocumentAndPDF
    # Documents = OneToManyField(
    #     DocumentAndPDF,
    #     verbose_name="Документы, на основании которых возникает обременение"
    # )

    class Meta:
        verbose_name = "Ограничение (обременение) права"


# Corresponds to XSD type[s]: tOrganization
class Organization(models.Model):
    Name = sNameNew255Field("Наименование юридического лица")
    AddressOrganization = sNe4000Field(
        "Адрес местонахождения юридического лица"
    )

    class Meta:
        verbose_name = "Юридическое лицо, если кадастровый инженер является работником юридического лица"


# Corresponds to XSD type[s]: tEngineer
class Engineer(CadastralEngineer):
    Organization = models.ForeignKey(
        Organization,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Юридическое лицо, если кадастровый инженер является работником юридического лица"
    )

    class Meta:
        verbose_name = "Кадастровый инженер"


# Corresponds to XSD type[s]: tEntitySpatialZUInp
class EntitySpatialZUInp(models.Model):
    EntSys = sIDREF255Field("Ссылка на систему координат")
    # SpatialElement is declared as a reverse relation from SpatialElementZUInp
    # SpatialElement = OneToManyField(
    #     SpatialElementZUInp,
    #     verbose_name="Элемент контура"
    # )

    class Meta:
        verbose_name = "Описание элементов контура (характерных точек контура) земельного участка, части земельного участка"


# Corresponds to XSD type[s]: tEntitySpatialBordersZUInp
class EntitySpatialBordersZUInp(EntitySpatialZUInp):
    # Borders is declared as a reverse relation from EntitySpatialBordersZUInpBorder
    # Borders = OneToManyField(
    #     EntitySpatialBordersZUInpBorder,
    #     verbose_name="Описание частей границ (от точки до точки)"
    # )

    class Meta:
        verbose_name = "Описание местоположения характерных точек границ и частей границ (от точки до точки) земельного участка"


# Corresponds to XSD type[s]: tLength
class Length(models.Model):
    Length = d20_2Field("Горизонтальное проложение в метрах", null=True)
    Definition = models.TextField(
        "Описание прохождения части границы",
        null=True
    )

    class Meta:
        verbose_name = "Горизонтальное проложение в метрах"


# Corresponds to XSD type[s]: tEntitySpatialBordersZUInp.Borders_Border
class EntitySpatialBordersZUInpBorder(Border):
    Edge = models.ForeignKey(
        Length,
        on_delete=models.PROTECT,
        verbose_name="Ребро"
    )
    entity_spatial_borders_zu_inp = models.ForeignKey(
        'EntitySpatialBordersZUInp',
        on_delete=models.CASCADE,
        related_name="Borders",
        verbose_name="entity_spatial_borders_zu_inp"
    )

    class Meta:
        verbose_name = "Часть границы (от точки до точки)"


# Corresponds to XSD type[s]: tEntitySpatialOldNew
class EntitySpatialOldNew(models.Model):
    EntSys = sIDREF255Field("Ссылка на систему координат")
    # SpatialElement is declared as a reverse relation from SpatialElementOldNew
    # SpatialElement = OneToManyField(
    #     SpatialElementOldNew,
    #     verbose_name="Элемент контура"
    # )
    # Borders is declared as a reverse relation from EntitySpatialOldNewBorder
    # Borders = OneToManyField(
    #     EntitySpatialOldNewBorder,
    #     verbose_name="Граница участка от точки до точки"
    # )

    class Meta:
        verbose_name = "Описание местоположения уточняемых границ (новые (уточненные), существующие точки)"


# Corresponds to XSD type[s]: tEntitySpatialOldNew.Borders_Border
class EntitySpatialOldNewBorder(Border):
    Edge = models.ForeignKey(
        Length,
        on_delete=models.PROTECT,
        verbose_name="Ребро"
    )
    entity_spatial_old_new = models.ForeignKey(
        'EntitySpatialOldNew',
        on_delete=models.CASCADE,
        related_name="Borders",
        verbose_name="entity_spatial_old_new"
    )

    class Meta:
        verbose_name = "Часть границы (от точки до точки)"


# Corresponds to XSD type[s]: tExistEZEntryParcel
class ExistEZEntryParcel(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер"
    ), null=True)
    Area = models.ForeignKey(
        AreaContour,
        on_delete=models.PROTECT,
        verbose_name="Площадь участка"
    )
    EntitySpatial = models.ForeignKey(
        EntitySpatialOldNew,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ уточняемого входящего участка"
    )
    specify_parcel = models.ForeignKey(
        'SpecifyParcel',
        on_delete=models.CASCADE,
        related_name="ExistEZ_ExistEZEntryParcels",
        verbose_name="specify_parcel"
    )

    class Meta:
        verbose_name = "Описание уточняемого участка, входящего в единое землепользование"


# Corresponds to XSD type[s]: tSubParcel
class SubParcel(models.Model):
    # xs:choice start
    EntitySpatial = models.ForeignKey(
        EntitySpatialZUInp,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    # Contours is declared as a reverse relation from SubParcelContour
    # Contours = OneToManyField(
    #     SubParcelContour,
    #     verbose_name="Контуры многоконтурной части"
    # )
    # xs:choice end
    Area = models.ForeignKey(
        Area,
        on_delete=models.PROTECT,
        verbose_name="Площадь"
    )
    Encumbrance = models.ForeignKey(
        Encumbrance,
        on_delete=models.PROTECT,
        verbose_name="Характеристика части"
    )

    class Meta:
        verbose_name = "Часть участка"


# Corresponds to XSD type[s]: tExistSubParcel
class ExistSubParcel(SubParcel):
    NumberRecord = p10Field("Учетный номер части ЗУ")
    change_parcel = models.ForeignKey(
        'ChangeParcel',
        on_delete=models.CASCADE,
        related_name="SubParcels_ExistSubParcel",
        verbose_name="change_parcel"
    )

    class Meta:
        verbose_name = "Существующая (уточняемая, изменяемая) часть участка"


# Corresponds to XSD type[s]: tForestUse
class ForestUse(models.Model):
    Kind = models.CharField(
        "Вид объекта",
        choices=[("233001000000", "Лес"), ("233002000000", "Водный объект"), ("233003000000", "Иной природный объект")],
        max_length=12,
        validators=[validators.RegexValidator(r"233001000000")]
    )
    ForestUse = dForestUseField(
        "Целевое назначение лесов\n"
"234001000000 - Защитные леса\n"
"234002000000 - Эксплуатационные леса\n"
"234003000000 - Резервные леса",
        null=True
    )
    ProtectiveForest = s255Field("Категория защитных лесов", null=True)

    class Meta:
        verbose_name = "Характеристика лесного участка"


# Corresponds to XSD type[s]: tNewEZEntryParcel
class NewEZEntryParcel(models.Model):
    Name = models.CharField(
        "Название участка. Обособленный (03) или Условный (04)",
        max_length=2,
        validators=[validators.RegexValidator(r"03")]
    )
    Definition = models.CharField(
        "Обозначение на плане",
        max_length=50,
        validators=[validators.RegexValidator(r"(\d{2}:\d{2}:\d{6,7}:\d{1,})?:ЗУ\d{1,}")]
    )
    CadastralBlock = CadastralBlockTypeField(
        "Номер кадастрового квартала, в котором расположен обособленный или условный участок"
    )
    Area = models.ForeignKey(
        AreaContour,
        on_delete=models.PROTECT,
        verbose_name="Площадь участка"
    )
    EntitySpatial = models.ForeignKey(
        EntitySpatialBordersZUInp,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )

    class Meta:
        verbose_name = "Обособленный или условный участок, включаемый в состав ЕЗ, сведения о котором отсутствуют в ГКН"


# Corresponds to XSD type[s]: tSpecifyParcel.ExistEZ_ExistEZParcels_CompositionEZ_InsertEntryParcels_InsertEntryParcel
class InsertEntryParcel(models.Model):
    # xs:choice start
    ExistEntryParcel = ArrayField(CadastralNumberTypeField(
        "Обособленный или условный участок, включаемый в состав ЕЗ (участок, которого до уточнения не было в составе данного ЕЗ, сведения о котором присутствуют в ГКН)::Кадастровый номер"
    ), null=True)
    NewEntryParcel = models.ForeignKey(
        NewEZEntryParcel,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Обособленный или условный участок, включаемый в состав ЕЗ, сведения о котором отсутствуют в ГКН"
    )
    # xs:choice end
    specify_parcel = models.ForeignKey(
        'SpecifyParcel',
        on_delete=models.CASCADE,
        related_name="ExistEZ_ExistEZParcels_CompositionEZ_InsertEntryParcels",
        verbose_name="specify_parcel"
    )

    class Meta:
        verbose_name = "Включаемый в состав ЕЗ обособленный или условный участок"


# Corresponds to XSD type[s]: tInvariableSubParcel
class InvariableSubParcel(models.Model):
    NumberRecord = p10Field("Учетный номер части ЗУ")
    Area_Area = p20Field("Площадь::Значение площади")
    Area_Unit = models.CharField(
        "Площадь::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    Encumbrance = models.ForeignKey(
        Encumbrance,
        on_delete=models.PROTECT,
        verbose_name="Характеристика части"
    )
    # Contours is declared as a reverse relation from InvariableSubParcelContour
    # Contours = OneToManyField(
    #     InvariableSubParcelContour,
    #     verbose_name="Контуры многоконтурной части"
    # )
    change_parcel = models.ForeignKey(
        'ChangeParcel',
        on_delete=models.CASCADE,
        related_name="SubParcels_InvariableSubParcel",
        verbose_name="change_parcel"
    )

    class Meta:
        verbose_name = "Существующая (неизменяемая) часть участка"


# Corresponds to XSD type[s]: tInvariableSubParcel.Contours_Contour
class InvariableSubParcelContour(models.Model):
    Number = sNe100Field("Порядковый номер контура многоконтурной части")
    Area = models.ForeignKey(
        AreaContour,
        on_delete=models.PROTECT,
        verbose_name="Площадь контура многоконтурной части"
    )
    invariable_sub_parcel = models.ForeignKey(
        'InvariableSubParcel',
        on_delete=models.CASCADE,
        related_name="Contours",
        verbose_name="invariable_sub_parcel"
    )

    class Meta:
        verbose_name = "Контур многоконтурной части"


# Corresponds to XSD type[s]: typename1.InputData_Documents_Document
class LandSurveyInputDocument(DocumentAndAppliedFile):
    AdditionalMap_Scale = sNe255Field(
        "Дополнительная информация к картографическому материалу::Масштаб соответствующего картографического произведения",
        null=True
    )
    AdditionalMap_DateMap = models.DateField(
        "Дополнительная информация к картографическому материалу::Дата создания картографического произведения",
        null=True
    )
    AdditionalMap_DateUpdate = models.DateField(
        "Дополнительная информация к картографическому материалу::Дата последнего обновления картографического произведения",
        null=True
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="InputData_Documents",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Описание документа"


# Corresponds to XSD type[s]: typename1.InputData_MeansSurvey_MeanSurvey
class LandSurveyInputMean(models.Model):
    Name = sNe1500Field("Наименование прибора (инструмента, аппаратуры)")
    Registration_Number = sNe255Field(
        "Сведения об утверждении типа средства измерений::Номер в Государственном реестре средств измерений"
    )
    Registration_Duration = sNe255Field(
        "Сведения об утверждении типа средства измерений::Срок действия свидетельства"
    )
    CertificateVerification = sNe4000Field(
        "Реквизиты свидетельства о поверке прибора (инструмента, аппаратуры)"
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="InputData_MeansSurvey",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Сведения о средстве измерений"


# Corresponds to XSD type[s]: tObjectRealty
class ObjectRealty(models.Model):
    InnerCadastralNumbers = ArrayField(CadastralNumberTypeField(
        "Кадастровые номера зданий, сооружений, объектов незавершенного строительства, расположенных на земельном участке::Кадастровый номер"
    ), null=True)
    # OldNumbers is declared as a reverse relation from OldNumber
    # OldNumbers = OneToManyField(
    #     OldNumber,
    #     verbose_name="Ранее присвоенные государственные учетные номера"
    # )

    class Meta:
        verbose_name = "Сведения о наличии зданий, сооружений, объектов незавершенного строительства на земельном участке"


# Corresponds to XSD type[s]: typename1.InputData_ObjectsRealty_ObjectRealty
class LandSurveyInputObjectRealty(ObjectRealty):
    CadastralNumberParcel = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер исходного земельного участка"
    ), null=True)
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="InputData_ObjectsRealty",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Сведения о наличии зданий, сооружений, объектов незавершенного строительства на исходном земельном участке"


# Corresponds to XSD type[s]: typename1.InputData_SubParcels_SubParcel
class LandSurveyInputSubParcel(models.Model):
    CadastralNumberParcel = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер земельного участка"
    ), null=True)
    NumberRecord = nonEmptyStringField(
        "Учетные номера частей земельного участка"
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="InputData_SubParcels",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Сведения о части (частях) исходного или уточняемого земельного участка"


# Corresponds to XSD type[s]: tSpecifyParcel
class SpecifyParcel(models.Model):
    # xs:choice start
    ExistParcel_CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Кадастровый номер"
    ), null=True)
    # xs:choice start
    ExistParcel_EntitySpatial = models.ForeignKey(
        EntitySpatialOldNew,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Описание местоположения границ уточняемого участка"
    )
    # ExistParcel_Contours is declared as a reverse relation from NewContour
    # ExistParcel_Contours = OneToManyField(
    #     NewContour,
    #     verbose_name="Контуры многоконтурного участка (если участок в результате уточнения становится/остается многоконтурным)"
    # )
    # xs:choice end
    ExistParcel_CadastralBlock = CadastralBlockTypeField(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Номер кадастрового квартала",
        null=True
    )
    ExistParcel_ObjectRealty = models.ForeignKey(
        ObjectRealty,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Сведения о наличии зданий, сооружений, объектов незавершенного строительства на земельном участке"
    )
    ExistParcel_Area = models.ForeignKey(
        AreaNew,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Площадь земельного участка"
    )
    # ExistParcel_SubParcels_NewSubParcel is declared as a reverse relation from NewSubParcel
    # ExistParcel_SubParcels_NewSubParcel = OneToManyField(
    #     NewSubParcel,
    #     verbose_name="Образуемая часть участка"
    # )
    # ExistParcel_SubParcels_ExistSubParcel is declared as a reverse relation from ExistSubParcel
    # ExistParcel_SubParcels_ExistSubParcel = OneToManyField(
    #     ExistSubParcel,
    #     verbose_name="Существующая (уточняемая, изменяемая) часть участка"
    # )
    # ExistParcel_SubParcels_InvariableSubParcel is declared as a reverse relation from InvariableSubParcel
    # ExistParcel_SubParcels_InvariableSubParcel = OneToManyField(
    #     InvariableSubParcel,
    #     verbose_name="Существующая (неизменяемая) часть участка"
    # )
    ExistParcel_AreaInGKN = nn20Field(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Площадь земельного участка по сведениям государственного кадастра недвижимости",
        null=True
    )
    ExistParcel_DeltaArea = nn20Field(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Оценка расхождения площадей",
        null=True
    )
    ExistParcel_MinArea_Area = p20Field(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Предельный минимальный размер земельного участка::Значение площади",
        null=True
    )
    ExistParcel_MinArea_Unit = models.CharField(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Предельный минимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    ExistParcel_MaxArea_Area = p20Field(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Предельный максимальный размер земельного участка::Значение площади",
        null=True
    )
    ExistParcel_MaxArea_Unit = models.CharField(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Предельный максимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    ExistParcel_Note = models.TextField(
        "Сведения об уточняемом участке, не являющемся единым землепользованием, и его частях::Иные сведения",
        null=True
    )
    # ExistParcel_RelatedParcels is declared as a reverse relation from Neighbours
    # ExistParcel_RelatedParcels = OneToManyField(
    #     Neighbours,
    #     verbose_name="Сведения о земельных участках, смежных с уточняемым земельным участком"
    # )
    ExistEZ_ExistEZParcels_CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Кадастровый номер единого землепользования"
    ), null=True)
    ExistEZ_ExistEZParcels_CadastralBlock = CadastralBlockTypeField(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Номер кадастрового квартала (для ЕЗ)",
        null=True
    )
    ExistEZ_ExistEZParcels_ObjectRealty = models.ForeignKey(
        ObjectRealty,
        null=True,
        on_delete=models.PROTECT,
        related_name="specify_parcel_as_ExistEZ_ExistEZParcels_ObjectRealty",
        verbose_name="Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Сведения о наличии зданий, сооружений, объектов незавершенного строительства на земельном участке (ЕЗ)"
    )
    ExistEZ_ExistEZParcels_Area = models.ForeignKey(
        AreaNew,
        null=True,
        on_delete=models.PROTECT,
        related_name="specify_parcel_as_ExistEZ_ExistEZParcels_Area",
        verbose_name="Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Площадь единого землепользования"
    )
    # ExistEZ_ExistEZParcels_SubParcels_NewSubParcel is declared as a reverse relation from NewSubParcel
    # ExistEZ_ExistEZParcels_SubParcels_NewSubParcel = OneToManyField(
    #     NewSubParcel,
    #     verbose_name="Образуемая часть участка"
    # )
    # ExistEZ_ExistEZParcels_SubParcels_ExistSubParcel is declared as a reverse relation from ExistSubParcel
    # ExistEZ_ExistEZParcels_SubParcels_ExistSubParcel = OneToManyField(
    #     ExistSubParcel,
    #     verbose_name="Существующая (уточняемая, изменяемая) часть участка"
    # )
    # ExistEZ_ExistEZParcels_SubParcels_InvariableSubParcel is declared as a reverse relation from InvariableSubParcel
    # ExistEZ_ExistEZParcels_SubParcels_InvariableSubParcel = OneToManyField(
    #     InvariableSubParcel,
    #     verbose_name="Существующая (неизменяемая) часть участка"
    # )
    # ExistEZ_ExistEZParcels_CompositionEZ_InsertEntryParcels is declared as a reverse relation from InsertEntryParcel
    # ExistEZ_ExistEZParcels_CompositionEZ_InsertEntryParcels = OneToManyField(
    #     InsertEntryParcel,
    #     verbose_name="Включаемые в состав ЕЗ обособленные или условные участки (которых до уточнения не было в составе данного ЕЗ)"
    # )
    # ExistEZ_ExistEZParcels_CompositionEZ_DeleteEntryParcels is declared as a reverse relation from CadastralNumberInp
    # ExistEZ_ExistEZParcels_CompositionEZ_DeleteEntryParcels = OneToManyField(
    #     CadastralNumberInp,
    #     verbose_name="Исключаемые из состава ЕЗ входящие участки"
    # )
    ExistEZ_ExistEZParcels_AreaInGKN = nn20Field(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Площадь земельного участка - единого землепользования по сведениям государственного кадастра недвижимости",
        null=True
    )
    ExistEZ_ExistEZParcels_DeltaArea = nn20Field(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Оценка расхождения площадей",
        null=True
    )
    ExistEZ_ExistEZParcels_MinArea_Area = p20Field(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Предельный минимальный размер земельного участка::Значение площади",
        null=True
    )
    ExistEZ_ExistEZParcels_MinArea_Unit = models.CharField(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Предельный минимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    ExistEZ_ExistEZParcels_MaxArea_Area = p20Field(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Предельный максимальный размер земельного участка::Значение площади",
        null=True
    )
    ExistEZ_ExistEZParcels_MaxArea_Unit = models.CharField(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Предельный максимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    ExistEZ_ExistEZParcels_Note = models.TextField(
        "Сведения об уточняемом едином землепользовании и его частях::Единое землепользование (ЕЗ)::Иные сведения",
        null=True
    )
    # ExistEZ_ExistEZParcels_RelatedParcels is declared as a reverse relation from Neighbours
    # ExistEZ_ExistEZParcels_RelatedParcels = OneToManyField(
    #     Neighbours,
    #     verbose_name="Сведения о земельных участках, смежных с уточняемым земельным участком"
    # )
    # ExistEZ_ExistEZEntryParcels is declared as a reverse relation from ExistEZEntryParcel
    # ExistEZ_ExistEZEntryParcels = OneToManyField(
    #     ExistEZEntryParcel,
    #     verbose_name="Сведения об уточняемых участках, входящих в ЕЗ"
    # )
    # xs:choice end
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Package_FormParcels_SpecifyParcelApproximal",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Уточнение границ земельного участка"


# Corresponds to XSD type[s]: typename1.Package_SpecifyParcel
class LandSurveySpecifyParcel(SpecifyParcel):
    # SpecifyRelatedParcel is declared as a reverse relation from SpecifyRelatedParcel
    # SpecifyRelatedParcel = OneToManyField(
    #     SpecifyRelatedParcel,
    #     verbose_name="Уточнение границ смежного земельного участка"
    # )
    # SpecifyParcelApproximal is declared as a reverse relation from SpecifyParcel
    # SpecifyParcelApproximal = OneToManyField(
    #     SpecifyParcel,
    #     verbose_name="Уточнение границ и площади смежного земельного участка"
    # )

    class Meta:
        verbose_name = "Уточнение границ"


# Corresponds to XSD type[s]: typename1
class LandSurveyPlan(models.Model):
    NameSoftware = sNe500Field("Наименование программы")
    VersionSoftware = sNe120Field("Версия программы")
    GUID = sGUIDField("Глобальный уникальный идентификатор пакета")
    Version = s2Field("Версия схемы", default='06')
    # xs:choice start
    Package_FormParcels_Method = dMethodField(
        "Пакет информации::Образование участков::Способ образования участка\n"
"1 - Выдел\n"
"2 - Раздел\n"
"3 - Раздел с измененным земельным участком\n"
"4 - Перераспределение\n"
"5 - Образование из земель\n"
"6 - Объединение\n"
"7 - Перераспределение с землями",
        null=True
    )
    # Package_FormParcels_NewParcel is declared as a reverse relation from NewParcel
    # Package_FormParcels_NewParcel = OneToManyField(
    #     NewParcel,
    #     verbose_name="Сведения об образуемых земельных участках и их частях"
    # )
    # Package_FormParcels_ChangeParcel is declared as a reverse relation from ChangeParcel
    # Package_FormParcels_ChangeParcel = OneToManyField(
    #     ChangeParcel,
    #     verbose_name="Сведения об измененных земельных участках и их частях"
    # )
    # Package_FormParcels_SpecifyRelatedParcel is declared as a reverse relation from SpecifyRelatedParcel
    # Package_FormParcels_SpecifyRelatedParcel = OneToManyField(
    #     SpecifyRelatedParcel,
    #     verbose_name="Уточнение границ смежного земельного участка"
    # )
    # Package_FormParcels_SpecifyParcelApproximal is declared as a reverse relation from SpecifyParcel
    # Package_FormParcels_SpecifyParcelApproximal = OneToManyField(
    #     SpecifyParcel,
    #     verbose_name="Уточнение границ и площади смежного земельного участка"
    # )
    Package_SpecifyParcel = models.ForeignKey(
        LandSurveySpecifyParcel,
        null=True,
        on_delete=models.CASCADE,
        verbose_name="Пакет информации::Уточнение границ"
    )
    Package_SubParcels_CadastralNumberParcel = ArrayField(CadastralNumberTypeField(
        "Пакет информации::Образование (уточнение) части (частей) земельного участка (если при этом не осуществлялось уточнение местоположения границы земельного участка или образование земельных участков)::Кадастровый номер земельного участка"
    ), null=True)
    # Package_SubParcels_NewSubParcel is declared as a reverse relation from NewSubParcel
    # Package_SubParcels_NewSubParcel = OneToManyField(
    #     NewSubParcel,
    #     verbose_name="Образование части земельного участка"
    # )
    # Package_SubParcels_ExistSubParcel is declared as a reverse relation from ExistSubParcel
    # Package_SubParcels_ExistSubParcel = OneToManyField(
    #     ExistSubParcel,
    #     verbose_name="Уточнение части земельного участка"
    # )
    # Package_SpecifyParcelsApproximal is declared as a reverse relation from SpecifyParcel
    # Package_SpecifyParcelsApproximal = OneToManyField(
    #     SpecifyParcel,
    #     verbose_name="Уточнение границ нескольких смежных земельных участков в связи с исправлением ошибки в местоположении их границ"
    # )
    # xs:choice end
    GeneralCadastralWorks_DateCadastral = models.DateField(
        "Общие сведения о кадастровых работах::Дата завершения кадастровых работ"
    )
    GeneralCadastralWorks_Contractor = models.ForeignKey(
        Engineer,
        on_delete=models.PROTECT,
        verbose_name="Общие сведения о кадастровых работах::Сведения о кадастровом инженере"
    )
    GeneralCadastralWorks_Reason = sNe4000Field(
        "Общие сведения о кадастровых работах::Вид кадастровых работ"
    )
    # GeneralCadastralWorks_Clients is declared as a reverse relation from ClientIdentify
    # GeneralCadastralWorks_Clients = OneToManyField(
    #     ClientIdentify,
    #     verbose_name="Сведения о заказчиках кадастровых работ"
    # )
    GeneralCadastralWorks_Purpose = models.TextField(
        "Общие сведения о кадастровых работах::Цель кадастровых работ",
        null=True
    )
    # CoordSystems is declared as a reverse relation from CoordSystem
    # CoordSystems = OneToManyField(
    #     CoordSystem,
    #     verbose_name="Перечень систем координат"
    # )
    # InputData_Documents is declared as a reverse relation from LandSurveyInputDocument
    # InputData_Documents = OneToManyField(
    #     LandSurveyInputDocument,
    #     verbose_name="Реквизиты (копии) использованных документов и документов, на основании которых указываются сведения об объекте недвижимости"
    # )
    # InputData_GeodesicBases is declared as a reverse relation from SetOfPoint
    # InputData_GeodesicBases = OneToManyField(
    #     SetOfPoint,
    #     verbose_name="Сведения о геодезической основе"
    # )
    # InputData_MeansSurvey is declared as a reverse relation from LandSurveyInputMean
    # InputData_MeansSurvey = OneToManyField(
    #     LandSurveyInputMean,
    #     verbose_name="Сведения о средствах измерений"
    # )
    # InputData_ObjectsRealty is declared as a reverse relation from LandSurveyInputObjectRealty
    # InputData_ObjectsRealty = OneToManyField(
    #     LandSurveyInputObjectRealty,
    #     verbose_name="Сведения о наличии зданий, сооружений, объектов незавершенного строительства на исходных земельных участках"
    # )
    # InputData_SubParcels is declared as a reverse relation from LandSurveyInputSubParcel
    # InputData_SubParcels = OneToManyField(
    #     LandSurveyInputSubParcel,
    #     verbose_name="Сведения о частях исходных или уточняемых земельных участков"
    # )
    # Survey_GeopointsOpred is declared as a reverse relation from SurveyGeopointOpred
    # Survey_GeopointsOpred = OneToManyField(
    #     SurveyGeopointOpred,
    #     verbose_name="Метод определения координат характерных точек границ земельных участков и их частей"
    # )
    # Survey_TochnGeopointsParcels is declared as a reverse relation from TochnSurvey
    # Survey_TochnGeopointsParcels = OneToManyField(
    #     TochnSurvey,
    #     verbose_name="Точность положения характерных точек границ земельных участков"
    # )
    # Survey_TochnGeopointsSubParcels is declared as a reverse relation from TochnSurveySubParcel
    # Survey_TochnGeopointsSubParcels = OneToManyField(
    #     TochnSurveySubParcel,
    #     verbose_name="Точность положения характерных точек границ частей земельных участков"
    # )
    # Survey_TochnAreaParcels is declared as a reverse relation from SurveyTochnAreaParcel
    # Survey_TochnAreaParcels = OneToManyField(
    #     SurveyTochnAreaParcel,
    #     verbose_name="Точность определения площади земельных участков"
    # )
    # Survey_TochnAreaSubParcels is declared as a reverse relation from SurveyTochnAreaSubParcel
    # Survey_TochnAreaSubParcels = OneToManyField(
    #     SurveyTochnAreaSubParcel,
    #     verbose_name="Точность определения площади частей земельных участков"
    # )
    Conclusion = models.TextField("Заключение кадастрового инженера", null=True)
    SchemeGeodesicPlotting = models.ForeignKey(
        AppliedFilePDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Схема геодезических построений"
    )
    SchemeDisposition = models.ForeignKey(
        AppliedFilePDF,
        null=True,
        on_delete=models.PROTECT,
        related_name="land_survey_plan_as_SchemeDisposition",
        verbose_name="Схема расположения земельных участков"
    )
    DiagramParcelsSubParcels = models.ForeignKey(
        AppliedFilePDF,
        on_delete=models.PROTECT,
        related_name="land_survey_plan_as_DiagramParcelsSubParcels",
        verbose_name="Чертеж земельных участков и их частей"
    )
    AgreementDocument = models.ForeignKey(
        AppliedFilePDF,
        null=True,
        on_delete=models.PROTECT,
        related_name="land_survey_plan_as_AgreementDocument",
        verbose_name="Акт согласования местоположения границы земельного участка"
    )
    # NodalPointSchemes is declared as a reverse relation from NodalPointScheme
    # NodalPointSchemes = OneToManyField(
    #     NodalPointScheme,
    #     verbose_name="Абрисы узловых точек границ земельных участков"
    # )
    # Appendix is declared as a reverse relation from LandSurveyPlanAppendixFile
    # Appendix = OneToManyField(
    #     LandSurveyPlanAppendixFile,
    #     verbose_name="Приложения"
    # )

    class Meta:
        verbose_name = "МЕЖЕВОЙ ПЛАН"


# Corresponds to XSD type[s]: typename1.Appendix_AppliedFiles
class LandSurveyPlanAppendixFile(models.Model):
    NumberAppendix = p10Field("Номер приложения")
    NameAppendix = sNe1000Field("Наименование приложения")
    AppliedFile = models.ForeignKey(
        AppliedFile,
        on_delete=models.PROTECT,
        verbose_name="Приложенный файл"
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Appendix",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Приложенные файлы"


# Corresponds to XSD type[s]: tLandUseDoc
class LandUseDoc(models.Model):
    LandUse = dAllowedUseField(
        "Вид разрешенного использования участка по классификатору видов разрешенного использования земельных участков dAllowedUse\n"
"214001000000 - Сельскохозяйственное использование\n"
"214001001000 - Растениеводство\n"
"214001001001 - Выращивание зерновых и иных сельскохозяйственных культур\n"
"214001001002 - Овощеводство\n"
"214001001003 - Выращивание тонизирующих, лекарственных, цветочных культур\n"
"214001001004 - Садоводство\n"
"214001001005 - Выращивание льна и конопли\n"
"214001002000 - Животноводство\n"
"214001002001 - Скотоводство\n"
"214001002002 - Звероводство\n"
"214001002003 - Птицеводство\n"
"214001002004 - Свиноводство\n"
"214001003000 - Пчеловодство\n"
"214001004000 - Рыбоводство\n"
"214001005000 - Научное обеспечение сельского хозяйства\n"
"214001006000 - Хранение и переработка сельскохозяйственной продукции\n"
"214001007000 - Ведение личного подсобного хозяйства на полевых участках\n"
"214001008000 - Питомники\n"
"214001009000 - Обеспечение сельскохозяйственного производства\n"
"214002000000 - Жилая застройка\n"
"214002001000 - Малоэтажная жилая застройка (индивидуальное жилищное строительство; размещение дачных домов и садовых домов)\n"
"214002002000 - Приусадебный участок личного подсобного хозяйства\n"
"214002003000 - Блокированная жилая застройка\n"
"214002004000 - Передвижное жилье\n"
"214002005000 - Среднеэтажная жилая застройка\n"
"214002006000 - Многоэтажная жилая застройка (высотная застройка)\n"
"214002007000 - Обслуживание жилой застройки\n"
"214003000000 - Общественное использование объектов капитального строительства\n"
"214003001000 - Коммунальное обслуживание\n"
"214003002000 - Социальное обслуживание\n"
"214003003000 - Бытовое обслуживание\n"
"214003004000 - Здравоохранение\n"
"214003005000 - Образование и просвещение\n"
"214003006000 - Культурное развитие\n"
"214003007000 - Религиозное использование\n"
"214003008000 - Общественное управление\n"
"214003009000 - Обеспечение научной деятельности\n"
"214003010000 - Ветеринарное обслуживание\n"
"214004000000 - Предпринимательство\n"
"214004001000 - Деловое управление\n"
"214004002000 - Торговые центры (Торгово-развлекательные центры)\n"
"214004003000 - Рынки\n"
"214004004000 - Магазины\n"
"214004005000 - Банковская и страховая деятельность\n"
"214004006000 - Общественное питание\n"
"214004007000 - Гостиничное обслуживание\n"
"214004008000 - Развлечения\n"
"214004009000 - Обслуживание автотранспорта\n"
"214005000000 - Отдых (рекреация)\n"
"214005001000 - Спорт\n"
"214005002000 - Природно-познавательный туризм\n"
"214005003000 - Охота и рыбалка\n"
"214005004000 - Причалы для маломерных судов\n"
"214005005000 - Поля для гольфа или конных прогулок\n"
"214006000000 - Производственная деятельность\n"
"214006001000 - Недропользование\n"
"214006002000 - Тяжелая промышленность\n"
"214006003000 - Легкая промышленность\n"
"214006004000 - Пищевая промышленность\n"
"214006005000 - Нефтехимическая промышленность\n"
"214006006000 - Строительная промышленность\n"
"214006007000 - Энергетика\n"
"214006008000 - Связь\n"
"214006009000 - Склады\n"
"214007000000 - Обеспечение космической деятельности\n"
"214008000000 - Транспорт\n"
"214008001000 - Железнодорожный транспорт\n"
"214008002000 - Автомобильный транспорт\n"
"214008003000 - Водный транспорт\n"
"214008004000 - Воздушный транспорт\n"
"214008005000 - Трубопроводный транспорт\n"
"214009000000 - Обеспечение обороны и безопасности\n"
"214010000000 - Обеспечение вооруженных сил\n"
"214011000000 - Охрана Государственной границы Российской Федерации\n"
"214012000000 - Обеспечение внутреннего правопорядка\n"
"214013000000 - Обеспечение деятельности по исполнению наказаний\n"
"214014000000 - Деятельность по особой охране и изучению природы\n"
"214015000000 - Охрана природных территорий\n"
"214016000000 - Курортная деятельность\n"
"214017000000 - Историческая\n"
"214018000000 - Лесная\n"
"214018001000 - Заготовка древесины\n"
"214018002000 - Лесные плантации\n"
"214018003000 - Заготовка лесных ресурсов\n"
"214018004000 - Резервные леса\n"
"214019000000 - Водные объекты\n"
"214020000000 - Общее пользование водными объектами\n"
"214021000000 - Специальное пользование водными объектами\n"
"214022000000 - Гидротехнические сооружения\n"
"214023000000 - Общее пользование территории\n"
"214024000000 - Ритуальная деятельность\n"
"214025000000 - Специальная\n"
"214026000000 - Запас\n"
"214099000000 - Сведения отсутствуют"
    )
    DocLandUse = models.ForeignKey(
        DocumentAndPDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Реквизиты документа, устанавливающего вид разрешенного использования земельного участка"
    )

    class Meta:
        verbose_name = "Вид разрешенного использования участка в соответствии с классификатором, утвержденным приказом Минэкономразвития России от 01.09.2014 № 540 и реквизиты документа, устанавливающего вид разрешенного использования земельного участка"


# Corresponds to XSD type[s]: tNewParcel.RelatedParcels_ParcelNeighbours.ParcelNeighbour; tSpecifyParcel.ExistEZ_ExistEZParcels_RelatedParcels_ParcelNeighbours.ParcelNeighbour; tSpecifyParcel.ExistParcel_RelatedParcels_ParcelNeighbours.ParcelNeighbour
class Neighbour(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер смежного земельного участка"
    ), null=True)
    OwnerNeighbours_NameRight = sNe255Field(
        "Сведения о правах и правообладателях смежного участка::Вид права"
    )
    # OwnerNeighbours_OwnerNeighbour is declared as a reverse relation from NeighbourOwner
    # OwnerNeighbours_OwnerNeighbour = OneToManyField(
    #     NeighbourOwner,
    #     verbose_name="Правообладатели смежного участка"
    # )
    neighbours = models.ForeignKey(
        'Neighbours',
        on_delete=models.CASCADE,
        related_name="ParcelNeighbour",
        verbose_name="neighbours"
    )

    class Meta:
        verbose_name = "Сведения о смежном земельном участке и его правообладателях"


# Corresponds to XSD type[s]: tNewParcel.RelatedParcels_ParcelNeighbours.ParcelNeighbour.OwnerNeighbours_OwnerNeighbour; tSpecifyParcel.ExistEZ_ExistEZParcels_RelatedParcels_ParcelNeighbours.ParcelNeighbour.OwnerNeighbours_OwnerNeighbour; tSpecifyParcel.ExistParcel_RelatedParcels_ParcelNeighbours.ParcelNeighbour.OwnerNeighbours_OwnerNeighbour
class NeighbourOwner(models.Model):
    ContactAddress = sNe4000Field("Контактный адрес правообладателя")
    # Documents is declared as a reverse relation from DocumentWithoutAppliedFile
    # Documents = OneToManyField(
    #     DocumentWithoutAppliedFile,
    #     verbose_name="Ревизиты документов, подтверждающих права на земельный участок"
    # )
    NameOwner = sNe4000Field("Правообладатель")
    neighbour = models.ForeignKey(
        'Neighbour',
        on_delete=models.CASCADE,
        related_name="OwnerNeighbours_OwnerNeighbour",
        verbose_name="neighbour"
    )

    class Meta:
        verbose_name = "Правообладатели смежного участка"


# Corresponds to XSD type[s]: tNewParcel.RelatedParcels_ParcelNeighbours; tSpecifyParcel.ExistEZ_ExistEZParcels_RelatedParcels_ParcelNeighbours; tSpecifyParcel.ExistParcel_RelatedParcels_ParcelNeighbours
class Neighbours(models.Model):
    Definition = sNe50Field("Обозначение характерной точки или части границы")
    # ParcelNeighbour is declared as a reverse relation from Neighbour
    # ParcelNeighbour = OneToManyField(
    #     Neighbour,
    #     verbose_name="Сведения о смежном земельном участке и его правообладателях"
    # )
    # Only in tNewParcel.RelatedParcels_ParcelNeighbours
    new_parcel = models.ForeignKey(
        'NewParcel',
        null=True,
        on_delete=models.CASCADE,
        related_name="RelatedParcels",
        verbose_name="new_parcel"
    )
    # NULL in tNewParcel.RelatedParcels_ParcelNeighbours
    specify_parcel = models.ForeignKey(
        'SpecifyParcel',
        null=True,
        on_delete=models.CASCADE,
        related_name="ExistEZ_ExistEZParcels_RelatedParcels",
        verbose_name="specify_parcel"
    )

    class Meta:
        verbose_name = "Сведения о смежных земельных участках и их правообладателях"


# Corresponds to XSD type[s]: tNewContour
class NewContour(models.Model):
    Definition = sNe50Field("Обозначение контура")
    Area = models.ForeignKey(
        AreaContour,
        on_delete=models.PROTECT,
        verbose_name="Площадь контура"
    )
    EntitySpatial = models.ForeignKey(
        EntitySpatialBordersZUInp,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    ProvidingPassCadastralNumbers = models.ForeignKey(
        ProvidingPassCadastralNumbers,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения о земельных участках, посредством которых обеспечивается доступ"
    )
    new_parcel = models.ForeignKey(
        'NewParcel',
        on_delete=models.CASCADE,
        related_name="Contours",
        verbose_name="new_parcel"
    )

    class Meta:
        verbose_name = "Новый контур многоконтурного участка"


# Corresponds to XSD type[s]: tUtilizationDoc
class UtilizationDoc(models.Model):
    Utilization = dUtilizationsField(
        "Вид использования участка по классификатору видов использования земель dUtilizations\n"
"141000000000 - Для размещения объектов сельскохозяйственного назначения и сельскохозяйственных угодий\n"
"141001000000 - Для сельскохозяйственного производства\n"
"141001010000 - Для использования в качестве сельскохозяйственных угодий\n"
"141001020000 - Для размещения зданий, строений, сооружений, используемых для производства, хранения и первичной переработки сельскохозяйственной продукции\n"
"141001030000 - Для размещения внутрихозяйственных дорог и коммуникаций\n"
"141001040000 - Для размещения водных объектов\n"
"141002000000 - Для ведения крестьянского (фермерского) хозяйства\n"
"141003000000 - Для ведения личного подсобного хозяйства\n"
"141004000000 - Для ведения гражданами садоводства и огородничества\n"
"141005000000 - Для ведения гражданами животноводства\n"
"141006000000 - Для дачного строительства\n"
"141007000000 - Для размещения древесно-кустарниковой растительности, предназначенной для защиты земель от воздействия негативных (вредных) природных, антропогенных и техногенных явлений\n"
"141008000000 - Для научно-исследовательских целей\n"
"141009000000 - Для учебных целей\n"
"141010000000 - Для сенокошения и выпаса скота гражданами\n"
"141011000000 - Фонд перераспределения\n"
"141012000000 - Для размещения объектов охотничьего хозяйства\n"
"141013000000 - Для размещения объектов рыбного хозяйства\n"
"141014000000 - Для иных видов сельскохозяйственного использования\n"
"142000000000 - Для размещения объектов, характерных для населенных пунктов\n"
"142001000000 - Для объектов жилой застройки\n"
"142001010000 - Для индивидуальной жилой застройки\n"
"142001020000 - Для многоквартирной застройки\n"
"142001020100 - Для малоэтажной застройки\n"
"142001020200 - Для среднеэтажной застройки\n"
"142001020300 - Для многоэтажной застройки\n"
"142001020400 - Для иных видов жилой застройки\n"
"142001030000 - Для размещения объектов дошкольного, начального, общего и среднего (полного) общего образования\n"
"142001040000 - Для размещения иных объектов, допустимых в жилых зонах и не перечисленных в классификаторе\n"
"142002000000 - Для объектов общественно-делового значения\n"
"142002010000 - Для размещения объектов социального и коммунально-бытового назначения\n"
"142002020000 - Для размещения объектов здравоохранения\n"
"142002030000 - Для размещения объектов культуры\n"
"142002040000 - Для размещения объектов торговли\n"
"142002040100 - Для размещения объектов розничной торговли\n"
"142002040200 - Для размещения объектов оптовой торговли\n"
"142002050000 - Для размещения объектов общественного питания\n"
"142002060000 - Для размещения объектов предпринимательской деятельности\n"
"142002070000 - Для размещения объектов среднего профессионального и высшего профессионального образования\n"
"142002080000 - Для размещения административных зданий\n"
"142002090000 - Для размещения научно-исследовательских учреждений\n"
"142002100000 - Для размещения культовых зданий\n"
"142002110000 - Для стоянок автомобильного транспорта\n"
"142002120000 - Для размещения объектов делового назначения, в том числе офисных центров\n"
"142002130000 - Для размещения объектов финансового назначения\n"
"142002140000 - Для размещения гостиниц\n"
"142002150000 - Для размещения подземных или многоэтажных гаражей\n"
"142002160000 - Для размещения индивидуальных гаражей\n"
"142002170000 - Для размещения иных объектов общественно-делового значения, обеспечивающих жизнь граждан\n"
"142003000000 - Для общего пользования (уличная сеть)\n"
"142004000000 - Для размещения объектов специального назначения\n"
"142004010000 - Для размещения кладбищ\n"
"142004020000 - Для размещения крематориев\n"
"142004030000 - Для размещения скотомогильников\n"
"142004040000 - Под объектами размещения отходов потребления\n"
"142004050000 - Под иными объектами специального назначения\n"
"142005000000 - Для размещения коммунальных, складских объектов\n"
"142006000000 - Для размещения объектов жилищно-коммунального хозяйства\n"
"142007000000 - Для иных видов использования, характерных для населенных пунктов\n"
"143000000000 - Для размещения объектов промышленности, энергетики, транспорта, связи, радиовещания, телевидения, информатики, обеспечения космической деятельности, обороны, безопасности и иного специального назначения\n"
"143001000000 - Для размещения промышленных объектов\n"
"143001010000 - Для размещения производственных и административных зданий, строений, сооружений и обслуживающих их объектов\n"
"143001010100 - Для размещения производственных зданий\n"
"143001010200 - Для размещения коммуникаций\n"
"143001010300 - Для размещения подъездных путей\n"
"143001010400 - Для размещения складских помещений\n"
"143001010500 - Для размещения административных зданий\n"
"143001010600 - Для размещения культурно-бытовых зданий\n"
"143001010700 - Для размещения иных сооружений промышленности\n"
"143001020000 - Для добычи и разработки полезных ископаемых\n"
"143001030000 - Для размещения иных объектов промышленности\n"
"143002000000 - Для размещения объектов энергетики\n"
"143002010000 - Для размещения электростанций и обслуживающих сооружений и объектов\n"
"143002010100 - Для размещения гидроэлектростанций\n"
"143002010200 - Для размещения атомных станций\n"
"143002010300 - Для размещения ядерных установок\n"
"143002010400 - Для размещения пунктов хранения ядерных материалов и радиоактивных веществ энергетики\n"
"143002010500 - Для размещения хранилищ радиоактивных отходов\n"
"143002010600 - Для размещения тепловых станций\n"
"143002010700 - Для размещения иных типов электростанций\n"
"143002010800 - Для размещения иных обслуживающих сооружений и объектов\n"
"143002020000 - Для размещения объектов электросетевого хозяйства\n"
"143002020100 - Для размещения воздушных линий электропередачи\n"
"143002020200 - Для размещения наземных сооружений кабельных линий электропередачи\n"
"143002020300 - Для размещения подстанций\n"
"143002020400 - Для размещения распределительных пунктов\n"
"143002020500 - Для размещения других сооружений и объектов электросетевого хозяйства\n"
"143002030000 - Для размещения иных объектов энергетики\n"
"143003000000 - Для размещения объектов транспорта\n"
"143003010000 - Для размещения и эксплуатации объектов железнодорожного транспорта\n"
"143003010100 - Для размещения железнодорожных путей и их конструктивных элементов\n"
"143003010200 - Для размещения полос отвода железнодорожных путей\n"
"143003010300 - Для размещения, эксплуатации, расширения и реконструкции строений, зданий, сооружений, в том числе железнодорожных вокзалов, железнодорожных станций, а также устройств и других объектов, необходимых для эксплуатации, содержания, строительства, реконструкции, ремонта, развития наземных и подземных зданий, строений, сооружений, устройств и других объектов железнодорожного транспорта\n"
"143003010301 - Для размещения железнодорожных вокзалов\n"
"143003010302 - Для размещения железнодорожных станций\n"
"143003010303 - Для размещения устройств и других объектов, необходимых для эксплуатации, содержания, строительства, реконструкции, ремонта, развития наземных и подземных зданий, строений, сооружений, устройств и других объектов железнодорожного транспорта\n"
"143003020000 - Для размещения и эксплуатации объектов автомобильного транспорта и объектов дорожного хозяйства\n"
"143003020100 - Для размещения автомобильных дорог и их конструктивных элементов\n"
"143003020200 - Для размещения полос отвода\n"
"143003020300 - Для размещения объектов дорожного сервиса в полосах отвода автомобильных дорог\n"
"143003020400 - Для размещения дорожных сооружений\n"
"143003020500 - Для размещения автовокзалов и автостанций\n"
"143003020600 - Для размещения иных объектов автомобильного транспорта и дорожного хозяйства\n"
"143003030000 - Для размещения и эксплуатации объектов морского, внутреннего водного транспорта\n"
"143003030100 - Для размещения искусственно созданных внутренних водных путей\n"
"143003030200 - Для размещения морских и речных портов, причалов, пристаней\n"
"143003030300 - Для размещения иных объектов морского, внутреннего водного транспорта\n"
"143003030400 - Для выделения береговой полосы\n"
"143003040000 - Для размещения и эксплуатации объектов воздушного транспорта\n"
"143003040100 - Для размещения аэропортов и аэродромов\n"
"143003040200 - Для размещения аэровокзалов\n"
"143003040300 - Для размещения взлетно-посадочных полос\n"
"143003040400 - Для размещения иных наземных объектов воздушного транспорта\n"
"143003050000 - Для размещения и эксплуатации объектов трубопроводного транспорта\n"
"143003050100 - Для размещения нефтепроводов\n"
"143003050200 - Для размещения газопроводов\n"
"143003050300 - Для размещения иных трубопроводов\n"
"143003050400 - Для размещения иных объектов трубопроводного транспорта\n"
"143003060000 - Для размещения и эксплуатации иных объектов транспорта\n"
"143004000000 - Для размещения объектов связи, радиовещания, телевидения, информатики\n"
"143004010000 - Для размещения эксплуатационных предприятий связи и обслуживания линий связи\n"
"143004020000 - Для размещения кабельных, радиорелейных и воздушных линий связи и линий радиофикации на трассах кабельных и воздушных линий связи и радиофикации и их охранные зоны\n"
"143004030000 - Для размещения подземных кабельных и воздушных линий связи и радиофикации и их охранные зоны\n"
"143004040000 - Для размещения наземных и подземных необслуживаемых усилительных пунктов на кабельных линиях связи и их охранные зоны\n"
"143004050000 - Для размещения наземных сооружений и инфраструктур спутниковой связи\n"
"143004060000 - Для размещения иных объектов связи, радиовещания, телевидения, информатики\n"
"143005000000 - Для размещения объектов, предназначенных для обеспечения космической деятельности\n"
"143005010000 - Для размещения космодромов, стартовых комплексов и пусковых установок\n"
"143005020000 - Для размещения командно-измерительных комплексов, центров и пунктов управления полетами космических объектов, приема, хранения и переработки информации\n"
"143005030000 - Для размещения баз хранения космической техники\n"
"143005040000 - Для размещения полигонов приземления космических объектов и взлетно-посадочных полос\n"
"143005050000 - Для размещения объектов экспериментальной базы для отработки космической техники\n"
"143005060000 - Для размещения центров и оборудования для подготовки космонавтов\n"
"143005070000 - Для размещения других наземных сооружений и техники, используемых при осуществлении космической деятельности\n"
"143006000000 - Для размещения объектов, предназначенных для обеспечения обороны и безопасности\n"
"143006010000 - Для обеспечения задач обороны\n"
"143006010100 - Для размещения военных организаций, учреждений и других объектов\n"
"143006010200 - Для дислокации войск и сил флота\n"
"143006010300 - Для проведения учений и иных мероприятий\n"
"143006010400 - Для испытательных полигонов\n"
"143006010500 - Для мест уничтожения оружия и захоронения отходов\n"
"143006010600 - Для создания запасов материальных ценностей в государственном и мобилизационном резервах (хранилища, склады и другие)\n"
"143006010700 - Для размещения иных объектов обороны\n"
"143006020000 - Для размещения объектов (территорий), обеспечивающих защиту и охрану Государственной границы Российской Федерации\n"
"143006020100 - Для обустройства и содержания инженерно-технических сооружений и заграждений\n"
"143006020200 - Для обустройства и содержания пограничных знаков\n"
"143006020300 - Для обустройства и содержания пограничных просек\n"
"143006020400 - Для обустройства и содержания коммуникаций\n"
"143006020500 - Для обустройства и содержания пунктов пропуска через Государственную границу Российской Федерации\n"
"143006020600 - Для размещения иных объектов для защиты и охраны Государственной границы Российской Федерации\n"
"143006030000 - Для размещения иных объектов обороны и безопасности\n"
"143007000000 - Для размещения иных объектов промышленности, энергетики, транспорта, связи, радиовещания, телевидения, информатики, обеспечения космической деятельности, обороны, безопасности и иного специального назначения\n"
"144000000000 - Для размещения особо охраняемых историко-культурных и природных объектов (территорий)\n"
"144001000000 - Для размещения особо охраняемых природных объектов (территорий)\n"
"144001010000 - Для размещения государственных природных заповедников (в том числе биосферных)\n"
"144001020000 - Для размещения государственных природных заказников\n"
"144001030000 - Для размещения национальных парков\n"
"144001040000 - Для размещения природных парков\n"
"144001050000 - Для размещения дендрологических парков\n"
"144001060000 - Для размещения ботанических садов\n"
"144001070000 - Для размещения объектов санаторного и курортного назначения\n"
"144001080000 - Территории месторождений минеральных вод, лечебных грязей, рапы лиманов и озер\n"
"144001090000 - Для традиционного природопользования\n"
"144001100000 - Для размещения иных особо охраняемых природных территорий (объектов)\n"
"144002000000 - Для размещения объектов (территорий) природоохранного назначения\n"
"144003000000 - Для размещения объектов (территорий) рекреационного назначения\n"
"144003010000 - Для размещения домов отдыха, пансионатов, кемпингов\n"
"144003020000 - Для размещения объектов физической культуры и спорта\n"
"144003030000 - Для размещения туристических баз, стационарных и палаточных туристско-оздоровительных лагерей, домов рыболова и охотника, детских туристических станций\n"
"144003040000 - Для размещения туристических парков\n"
"144003050000 - Для размещения лесопарков\n"
"144003060000 - Для размещения учебно-туристических троп и трасс\n"
"144003070000 - Для размещения детских и спортивных лагерей\n"
"144003080000 - Для размещения скверов, парков, городских садов\n"
"144003090000 - Для размещения пляжей\n"
"144003100000 - Для размещения иных объектов (территорий) рекреационного назначения\n"
"144004000000 - Для размещения объектов историко-культурного назначения\n"
"144004010000 - Для размещения объектов культурного наследия народов Российской Федерации (памятников истории и культуры), в том числе объектов археологического наследия\n"
"144004020000 - Для размещения военных и гражданских захоронений\n"
"144005000000 - Для размещения иных особо охраняемых историко-культурных и природных объектов (территорий)\n"
"145000000000 - Для размещения объектов лесного фонда\n"
"145001000000 - Для размещения лесной растительности\n"
"145002000000 - Для восстановления лесной растительности\n"
"145003000000 - Для прочих объектов лесного хозяйства\n"
"146000000000 - Для размещения объектов водного фонда\n"
"146001000000 - Под водными объектами\n"
"146002000000 - Для размещения гидротехнических сооружений\n"
"146003000000 - Для размещения иных сооружений, расположенных на водных объектах\n"
"147000000000 - Земли запаса (неиспользуемые)",
        null=True
    )
    ByDoc = s4000Field(
        "Вид разрешенного использования участка по документу",
        null=True
    )
    DocUtilization = models.ForeignKey(
        DocumentAndPDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Реквизиты документа, устанавливающего вид разрешенного использования земельного участка"
    )

    class Meta:
        verbose_name = "Сведения о виде использования участка в соответствии с ранее использовавшимся классификатором dUtilizations Сборника классификаторов, сведения о разрешенном использовании в соответствии с документом, реквизиты документа, устанавливающего вид разрешенного использования земельного участка"


# Corresponds to XSD type[s]: tNewParcel
class NewParcel(models.Model):
    Definition = models.CharField(
        "Обозначение образованного земельного участка",
        max_length=50,
        validators=[validators.RegexValidator(r"(\d{2}:\d{2}:\d{6,7}:\d{1,})?:ЗУ\d{1,}")]
    )
    # xs:choice start
    Utilization = models.ForeignKey(
        UtilizationDoc,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Вид использования участка в соответствии с ранее использовавшимся классификатором (dUtilizations) и сведения о разрешенном использовании в соответствии с документом"
    )
    LandUse = models.ForeignKey(
        LandUseDoc,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Вид разрешенного использования земельного участка в соответствии с классификатором, утвержденным приказом Минэкономразвития России от 01.09.2014 № 540"
    )
    # xs:choice end
    # xs:choice start
    # Contours is declared as a reverse relation from NewContour
    # Contours = OneToManyField(
    #     NewContour,
    #     verbose_name="Контуры многоконтурного участка"
    # )
    EntitySpatial = models.ForeignKey(
        EntitySpatialBordersZUInp,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    # xs:choice end
    CadastralBlock = CadastralBlockTypeField("Номер кадастрового квартала")
    PrevCadastralNumbers = models.ForeignKey(
        CadastralNumbersInp,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Кадастровые номера земельных участков, из которых образован данный участок"
    )
    ProvidingPassCadastralNumbers = models.ForeignKey(
        ProvidingPassCadastralNumbers,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения о земельных участках, посредством которых обеспечивается доступ"
    )
    ObjectRealty = models.ForeignKey(
        ObjectRealty,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Сведения о наличии зданий, сооружений, объектов незавершенного строительства на земельном участке"
    )
    Area = models.ForeignKey(
        AreaNew,
        on_delete=models.PROTECT,
        verbose_name="Площадь земельного участка"
    )
    Address_OKATO = OKATOTypeField(
        "Адрес (описание местоположения) участка::ОКАТО",
        null=True
    )
    Address_KLADR = sNe20Field("Адрес (описание местоположения) участка::КЛАДР")
    Address_OKTMO = OKTMOTypeField(
        "Адрес (описание местоположения) участка::ОКТМО",
        null=True
    )
    Address_PostalCode = PostalCodeRFTypeField(
        "Адрес (описание местоположения) участка::Почтовый индекс",
        null=True
    )
    Address_Region = dRegionsRFField(
        "Адрес (описание местоположения) участка::Код региона\n"
"01 - Республика Адыгея (Адыгея)\n"
"02 - Республика Башкортостан\n"
"03 - Республика Бурятия\n"
"04 - Республика Алтай\n"
"05 - Республика Дагестан\n"
"06 - Республика Ингушетия\n"
"07 - Кабардино-Балкарская Республика\n"
"08 - Республика Калмыкия\n"
"09 - Карачаево-Черкесская Республика\n"
"10 - Республика Карелия\n"
"11 - Республика Коми\n"
"12 - Республика Марий Эл\n"
"13 - Республика Мордовия\n"
"14 - Республика Саха (Якутия)\n"
"15 - Республика Северная Осетия-Алания\n"
"16 - Республика Татарстан (Татарстан)\n"
"17 - Республика Тыва\n"
"18 - Удмуртская Республика\n"
"19 - Республика Хакасия\n"
"20 - Чеченская Республика\n"
"21 - Чувашская Республика-Чувашия\n"
"22 - Алтайский край\n"
"23 - Краснодарский край\n"
"24 - Красноярский край\n"
"25 - Приморский край\n"
"26 - Ставропольский край\n"
"27 - Хабаровский край\n"
"28 - Амурская область\n"
"29 - Архангельская область\n"
"30 - Астраханская область\n"
"31 - Белгородская область\n"
"32 - Брянская область\n"
"33 - Владимирская область\n"
"34 - Волгоградская область\n"
"35 - Вологодская область\n"
"36 - Воронежская область\n"
"37 - Ивановская область\n"
"38 - Иркутская область\n"
"39 - Калининградская область\n"
"40 - Калужская область\n"
"41 - Камчатский край\n"
"42 - Кемеровская область\n"
"43 - Кировская область\n"
"44 - Костромская область\n"
"45 - Курганская область\n"
"46 - Курская область\n"
"47 - Ленинградская область\n"
"48 - Липецкая область\n"
"49 - Магаданская область\n"
"50 - Московская область\n"
"51 - Мурманская область\n"
"52 - Нижегородская область\n"
"53 - Новгородская область\n"
"54 - Новосибирская область\n"
"55 - Омская область\n"
"56 - Оренбургская область\n"
"57 - Орловская область\n"
"58 - Пензенская область\n"
"59 - Пермский край\n"
"60 - Псковская область\n"
"61 - Ростовская область\n"
"62 - Рязанская область\n"
"63 - Самарская область\n"
"64 - Саратовская область\n"
"65 - Сахалинская область\n"
"66 - Свердловская область\n"
"67 - Смоленская область\n"
"68 - Тамбовская область\n"
"69 - Тверская область\n"
"70 - Томская область\n"
"71 - Тульская область\n"
"72 - Тюменская область\n"
"73 - Ульяновская область\n"
"74 - Челябинская область\n"
"75 - Забайкальский край\n"
"76 - Ярославская область\n"
"77 - Москва\n"
"78 - Санкт-Петербург\n"
"79 - Еврейская автономная область\n"
"83 - Ненецкий автономный округ\n"
"86 - Ханты-Мансийский автономный округ - Югра\n"
"87 - Чукотский автономный округ\n"
"89 - Ямало-Ненецкий автономный округ\n"
"91 - Республика Крым\n"
"92 - Севастополь\n"
"98 - Неопределено\n"
"99 - Значение отсутствует"
    )
    Address_District = models.ForeignKey(
        District,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Район"
    )
    Address_City = models.ForeignKey(
        City,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Муниципальное образование"
    )
    Address_UrbanDistrict = models.ForeignKey(
        UrbanDistrict,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Городской район"
    )
    Address_SovietVillage = models.ForeignKey(
        SovietVillage,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Сельсовет"
    )
    Address_Locality = models.ForeignKey(
        Locality,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Населённый пункт"
    )
    Address_Street = models.ForeignKey(
        Street,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Улица"
    )
    Address_Level1 = models.ForeignKey(
        Level1,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Дом"
    )
    Address_Level2 = models.ForeignKey(
        Level2,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Корпус"
    )
    Address_Level3 = models.ForeignKey(
        Level3,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Строение"
    )
    Address_Apartment = models.ForeignKey(
        Apartment,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Квартира"
    )
    Address_Other = s2500Field(
        "Адрес (описание местоположения) участка::Иное описание местоположения",
        null=True
    )
    Address_AddressOrLocation = sAddressOrLocationField(
        "Адрес (описание местоположения) участка::Признак, позволяющий отличить присвоенный в установленном порядке адрес объекта недвижимости и описание местоположения объекта недвижимости (0-описание местоположения, 1-адрес)"
    )
    Address_Document = models.ForeignKey(
        DocumentAndPDF,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Адрес (описание местоположения) участка::Реквизиты акта органа государственной власти или органа местного самоуправления, уполномоченного присваивать адреса земельным участкам"
    )
    Category = models.ForeignKey(
        CategoryDoc,
        on_delete=models.PROTECT,
        verbose_name="Категория земель"
    )
    NaturalObject = models.ForeignKey(
        ForestUse,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Характеристика лесного участка"
    )
    # SubParcels is declared as a reverse relation from NewSubParcel
    # SubParcels = OneToManyField(
    #     NewSubParcel,
    #     verbose_name="Сведения о частях участка"
    # )
    MinArea_Area = p20Field(
        "Предельный минимальный размер земельного участка::Значение площади",
        null=True
    )
    MinArea_Unit = models.CharField(
        "Предельный минимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    MaxArea_Area = p20Field(
        "Предельный максимальный размер земельного участка::Значение площади",
        null=True
    )
    MaxArea_Unit = models.CharField(
        "Предельный максимальный размер земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3,
        null=True
    )
    Note = models.TextField("Иные сведения", null=True)
    # RelatedParcels is declared as a reverse relation from Neighbours
    # RelatedParcels = OneToManyField(
    #     Neighbours,
    #     verbose_name="Сведения о земельных участках, смежных с образуемым земельным участком"
    # )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Package_FormParcels_NewParcel",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Описание образуемого земельного участка и его частей"


# Corresponds to XSD type[s]: tNewSubParcel
class NewSubParcel(SubParcel):
    Definition = sNe50Field("Обозначение части ЗУ")
    new_parcel = models.ForeignKey(
        'NewParcel',
        on_delete=models.CASCADE,
        related_name="SubParcels",
        verbose_name="new_parcel"
    )

    class Meta:
        verbose_name = "Образуемая часть участка"


# Corresponds to XSD type[s]: typename1.NodalPointSchemes_NodalPointScheme
class NodalPointScheme(models.Model):
    Definition = sNe50Field("Обозначение точки")
    AppliedFile = models.ForeignKey(
        AppliedFilePDF,
        on_delete=models.PROTECT,
        verbose_name="Приложенный файл"
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="NodalPointSchemes",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Абрис узловых точек границ земельных участков"


# Corresponds to XSD type[s]: tOldNumber
class OldNumber(models.Model):
    Type = dOldNumberField(
        "Тип (кадастровый, условный, инвентарный, иной)\n"
"01 - Инвентарный номер\n"
"02 - Условный номер\n"
"03 - Кадастровый номер\n"
"99 - Иной номер"
    )
    Number = sNe500Field("Номер")
    object_realty = models.ForeignKey(
        'ObjectRealty',
        on_delete=models.CASCADE,
        related_name="OldNumbers",
        verbose_name="object_realty"
    )

    class Meta:
        verbose_name = "Ранее присвоенный номер"


# Corresponds to XSD type[s]: tOrdinateXY
class OrdinateXY(models.Model):
    X = d38_2Field("Координата X")
    Y = d38_2Field("Координата Y")
    NumGeopoint = p22Field("Номер точки (межевой точки)", null=True)
    specify_related_parcel = models.ForeignKey(
        'SpecifyRelatedParcel',
        on_delete=models.CASCADE,
        related_name="DeleteAllBorder",
        verbose_name="specify_related_parcel"
    )

    class Meta:
        verbose_name = "Координата (X, Y)"


# Corresponds to XSD type[s]: tSetOfPoint
class SetOfPoint(models.Model):
    PName = sNe4000Field("Название пункта")
    PKind = sNe4000Field("Тип знака")
    PKlass = sNe4000Field("Класс геодезической сети")
    OrdX = d38_2Field("Координата Х")
    OrdY = d38_2Field("Координата Y")
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="InputData_GeodesicBases",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Описание пункта геодезической сети (ОМС)"


# Corresponds to XSD type[s]: tSpatialElementOldNew
class SpatialElementOldNew(models.Model):
    # SpelementUnit is declared as a reverse relation from SpelementUnitOldNew
    # SpelementUnit = OneToManyField(
    #     SpelementUnitOldNew,
    #     verbose_name="Часть элемента (точка)"
    # )
    entity_spatial_old_new = models.ForeignKey(
        'EntitySpatialOldNew',
        on_delete=models.CASCADE,
        related_name="SpatialElement",
        verbose_name="entity_spatial_old_new"
    )

    class Meta:
        verbose_name = "Элемент контура"


# Corresponds to XSD type[s]: tSpatialElementZUInp
class SpatialElementZUInp(models.Model):
    # SpelementUnit is declared as a reverse relation from SpelementUnitZUInp
    # SpelementUnit = OneToManyField(
    #     SpelementUnitZUInp,
    #     verbose_name="Часть элемента (точка)"
    # )
    entity_spatial_zu_inp = models.ForeignKey(
        'EntitySpatialZUInp',
        on_delete=models.CASCADE,
        related_name="SpatialElement",
        verbose_name="entity_spatial_zu_inp"
    )

    class Meta:
        verbose_name = "Элемент контура"


# Corresponds to XSD type[s]: tSpecifyRelatedParcel
class SpecifyRelatedParcel(models.Model):
    CadastralNumber = ArrayField(CadastralNumberTypeField(
        "Кадастровый номер земельного участка"
    ), null=True)
    NumberRecord = p10Field(
        "Учетный номер контура многоконтурного участка",
        null=True
    )
    # ExistSubParcels is declared as a reverse relation from SpecifyRelatedParcelExistSubParcel
    # ExistSubParcels = OneToManyField(
    #     SpecifyRelatedParcelExistSubParcel,
    #     verbose_name="Описание границ существующих частей уточняемого смежного участка (в т.ч. многоконтурных частей)"
    # )
    # xs:choice start
    AllBorder_EntitySpatial = models.ForeignKey(
        EntitySpatialOldNew,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Полное описание границы смежного участка (контура многоконтурного участка, входящего в ЕЗ участка)::Описание местоположения границ"
    )
    # ChangeBorder is declared as a reverse relation from SpelementUnitChangeBorder
    # ChangeBorder = OneToManyField(
    #     SpelementUnitChangeBorder,
    #     verbose_name="Изменение части границы (от точки до точки). В том числе добавление/исключение внутреннего контура (дырки)"
    # )
    # Contours is declared as a reverse relation from NewContour
    # Contours = OneToManyField(
    #     NewContour,
    #     verbose_name="Контуры многоконтурного участка (если участок в результате уточнения становится многоконтурным или в существующем многоконтурном участке добавляются новые контуры)"
    # )
    # DeleteAllBorder is declared as a reverse relation from OrdinateXY
    # DeleteAllBorder = OneToManyField(
    #     OrdinateXY,
    #     verbose_name="Исключение границы контура многоконтурного участка (исключение контура полностью)"
    # )
    # xs:choice end
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Package_FormParcels_SpecifyRelatedParcel",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Уточнение границ смежного земельного участка (в т.ч. части участка) при образовании или уточнении границ ЗУ"


# Corresponds to XSD type[s]: tSpecifyRelatedParcel.ExistSubParcels_ExistSubParcel
class SpecifyRelatedParcelExistSubParcel(models.Model):
    NumberRecord = p10Field("Учетный номер части")
    # xs:choice start
    EntitySpatial = models.ForeignKey(
        EntitySpatialZUInp,
        null=True,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    # Contours is declared as a reverse relation from SpecifyRelatedParcelExistSubParcelContour
    # Contours = OneToManyField(
    #     SpecifyRelatedParcelExistSubParcelContour,
    #     verbose_name="Контуры многоконтурной части"
    # )
    # xs:choice end
    specify_related_parcel = models.ForeignKey(
        'SpecifyRelatedParcel',
        on_delete=models.CASCADE,
        related_name="ExistSubParcels",
        verbose_name="specify_related_parcel"
    )

    class Meta:
        verbose_name = "Описание границ существующей части уточняемого смежного участка (в т.ч. многоконтурной части)"


# Corresponds to XSD type[s]: tSpecifyRelatedParcel.ExistSubParcels_ExistSubParcel.Contours_Contour
class SpecifyRelatedParcelExistSubParcelContour(models.Model):
    Number = p10Field("Порядковый номер контура многоконтурной части")
    EntitySpatial = models.ForeignKey(
        EntitySpatialZUInp,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    specify_related_parcel_exist_sub_parcel = models.ForeignKey(
        'SpecifyRelatedParcelExistSubParcel',
        on_delete=models.CASCADE,
        related_name="Contours",
        verbose_name="specify_related_parcel_exist_sub_parcel"
    )

    class Meta:
        verbose_name = "Контур многоконтурной части"


# Corresponds to XSD type[s]: tSpelementUnitChangeBorder
class SpelementUnitChangeBorder(models.Model):
    TypeUnit = models.CharField(
        "Элементарный тип для части элемента",
        choices=[("Точка", "Точка"), ("Линия", "Линия"), ("Дуга", "Дуга"), ("Прямоугольник", "Прямоугольник"), ("Окружность", "Окружность")],
        max_length=13,
        validators=[validators.RegexValidator(r"Точка")]
    )
    OldOrdinate_X = d38_2Field("Существующая точка::Координата X", null=True)
    OldOrdinate_Y = d38_2Field("Существующая точка::Координата Y", null=True)
    OldOrdinate_NumGeopoint = p22Field(
        "Существующая точка::Номер точки (межевой точки)",
        null=True
    )
    NewOrdinate_X = d38_2Field("Новая точка::Координата X", null=True)
    NewOrdinate_Y = d38_2Field("Новая точка::Координата Y", null=True)
    NewOrdinate_NumGeopoint = p22Field(
        "Новая точка::Номер точки (межевой точки)",
        null=True
    )
    NewOrdinate_DeltaGeopoint = d20_2Field(
        "Новая точка::Средняя квадратическая погрешность положения характерной точки",
        null=True
    )
    NewOrdinate_PointPref = s30Field(
        "Новая точка::Префикс номера точки",
        null=True
    )
    NewOrdinate_GeopointZacrep = s120Field(
        "Новая точка::Описание закрепления точки",
        null=True
    )
    specify_related_parcel = models.ForeignKey(
        'SpecifyRelatedParcel',
        on_delete=models.CASCADE,
        related_name="ChangeBorder",
        verbose_name="specify_related_parcel"
    )

    class Meta:
        verbose_name = "Часть элемента (новая (уточненная) точка, существующая точка)"


# Corresponds to XSD type[s]: tSpelementUnitOldNew
class SpelementUnitOldNew(models.Model):
    TypeUnit = models.CharField(
        "Элементарный тип для части элемента",
        choices=[("Точка", "Точка"), ("Линия", "Линия"), ("Дуга", "Дуга"), ("Прямоугольник", "Прямоугольник"), ("Окружность", "Окружность")],
        max_length=13,
        validators=[validators.RegexValidator(r"Точка")]
    )
    OldOrdinate_X = d38_2Field("Существующая точка::Координата X", null=True)
    OldOrdinate_Y = d38_2Field("Существующая точка::Координата Y", null=True)
    OldOrdinate_NumGeopoint = p22Field(
        "Существующая точка::Номер точки (межевой точки)",
        null=True
    )
    NewOrdinate_X = d38_2Field("Новая точка::Координата X", null=True)
    NewOrdinate_Y = d38_2Field("Новая точка::Координата Y", null=True)
    NewOrdinate_NumGeopoint = p22Field(
        "Новая точка::Номер точки (межевой точки)",
        null=True
    )
    NewOrdinate_DeltaGeopoint = d20_2Field(
        "Новая точка::Средняя квадратическая погрешность положения характерной точки",
        null=True
    )
    NewOrdinate_PointPref = s30Field(
        "Новая точка::Префикс номера точки",
        null=True
    )
    NewOrdinate_GeopointZacrep = s120Field(
        "Новая точка::Описание закрепления точки",
        null=True
    )
    spatial_element_old_new = models.ForeignKey(
        'SpatialElementOldNew',
        on_delete=models.CASCADE,
        related_name="SpelementUnit",
        verbose_name="spatial_element_old_new"
    )

    class Meta:
        verbose_name = "Часть элемента (новая (уточненная) точка, существующая точка (при наличии в ГКН))"


# Corresponds to XSD type[s]: tSpelementUnitZUInp
class SpelementUnitZUInp(models.Model):
    TypeUnit = models.CharField(
        "Элементарный тип для части элемента",
        choices=[("Точка", "Точка"), ("Линия", "Линия"), ("Дуга", "Дуга"), ("Прямоугольник", "Прямоугольник"), ("Окружность", "Окружность")],
        max_length=13,
        validators=[validators.RegexValidator(r"Точка")]
    )
    Ordinate_X = d38_2Field("Координата::Координата X")
    Ordinate_Y = d38_2Field("Координата::Координата Y")
    Ordinate_NumGeopoint = p22Field("Координата::Номер точки (межевой точки)")
    Ordinate_DeltaGeopoint = d20_2Field(
        "Координата::Средняя квадратическая погрешность положения характерной точки"
    )
    Ordinate_PointPref = s30Field("Координата::Префикс номера точки", null=True)
    Ordinate_GeopointZacrep = s120Field(
        "Координата::Описание закрепления точки",
        null=True
    )
    spatial_element_zu_inp = models.ForeignKey(
        'SpatialElementZUInp',
        on_delete=models.CASCADE,
        related_name="SpelementUnit",
        verbose_name="spatial_element_zu_inp"
    )

    class Meta:
        verbose_name = "Часть элемента (точка)"


# Corresponds to XSD type[s]: tSubParcel.Contours_Contour
class SubParcelContour(models.Model):
    Number = sNe100Field("Порядковый номер контура многоконтурной части")
    Area = models.ForeignKey(
        AreaContour,
        on_delete=models.PROTECT,
        verbose_name="Площадь контура многоконтурной части"
    )
    EntitySpatial = models.ForeignKey(
        EntitySpatialZUInp,
        on_delete=models.PROTECT,
        verbose_name="Описание местоположения границ"
    )
    sub_parcel = models.ForeignKey(
        'SubParcel',
        on_delete=models.CASCADE,
        related_name="Contours",
        verbose_name="sub_parcel"
    )

    class Meta:
        verbose_name = "Контур многоконтурной части"


# Corresponds to XSD type[s]: typename1.Survey_GeopointsOpred_GeopointOpred
class SurveyGeopointOpred(models.Model):
    CadastralNumberDefinition = sNe50Field(
        "Кадастровый номер или обозначение земельного участка, части (частей) земельного участка"
    )
    Methods = ArrayField(dGeopointOpredField(
        "Метод (методы) определения координат::Метод определения координат\n"
"692001000000 - Геодезический метод\n"
"692002000000 - Фотограмметрический метод\n"
"692003000000 - Картометрический метод\n"
"692004000000 - Иное описание\n"
"692005000000 - Метод спутниковых геодезических измерений (определений)\n"
"692006000000 - Аналитический метод"
    ), null=True)
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Survey_GeopointsOpred",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Метод определения координат характерных точек границ земельных участков и их частей"


# Corresponds to XSD type[s]: tTochnSurvey
class TochnSurvey(models.Model):
    CadastralNumberDefinition = sNe50Field(
        "Кадастровый номер или обозначение земельного участка"
    )
    Formula = sNe4000Field("Формулы")
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Survey_TochnGeopointsParcels",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Вычисления"


# Corresponds to XSD type[s]: typename1.Survey_TochnAreaParcels_TochnAreaParcel
class SurveyTochnAreaParcel(TochnSurvey):
    Area_Area = p20Field("Площадь земельного участка::Значение площади")
    Area_Unit = models.CharField(
        "Площадь земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Survey_TochnAreaParcels",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Точность определения площади земельного участка"


# Corresponds to XSD type[s]: tTochnSurveySubParcel
class TochnSurveySubParcel(TochnSurvey):
    NumberRecordDefinition = sNe50Field("Учетный номер или обозначение части")
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Survey_TochnGeopointsSubParcels",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Вычисления (для частей земельных участков)"


# Corresponds to XSD type[s]: typename1.Survey_TochnAreaSubParcels_TochnAreaSubParcel
class SurveyTochnAreaSubParcel(TochnSurveySubParcel):
    Area_Area = p20Field("Площадь части земельного участка::Значение площади")
    Area_Unit = models.CharField(
        "Площадь части земельного участка::Единица измерения - квадратный метр",
        choices=[("055", "055")],
        max_length=3
    )
    land_survey_plan = models.ForeignKey(
        'LandSurveyPlan',
        on_delete=models.CASCADE,
        related_name="Survey_TochnAreaSubParcels",
        verbose_name="land_survey_plan"
    )

    class Meta:
        verbose_name = "Точность определения площади части земельного участка"


